<html>
<head>
<title>
Diploma Universitario di Ingegneria Informatica,
Esame di Fondamenti di Informatica II - primo modulo,
A.A. 1999/2000 - Appello del 19 dicembre 2000
</title>
</head>

<body>

<h3 align="center">
Diploma Universitario di Ingegneria Informatica<br>
Esame di Fondamenti di Informatica II - primo modulo <br>
A.A. 1999/2000 - Appello del 19 dicembre 2000</h3>

<p><b>Problema 1</b>&nbsp;&nbsp; Si consideri la seguente specifica del
tipo astratto <i>Officina</i>:

<dl>
  <dt><b><u>TipoAstratto</u></b> <i>Officina</i><p>
  <dt><b><u>Sorte</u></b> <i>Off</i> (sorta per il dominio di interesse)<p>
  <dt><b><u>Funzioni</u></b><p>

       <ul>
         <li><i>Crea : (PartitaIva) --&gt; Off</i> <br>
              precondizioni e postcondizioni per <i>crea(p) = o</i> <br>
              <u>pre</u>: nessuna <br>
              <u>post</u>: <i>o</i> &egrave;
              un'officina avente <i>p</i> come partita iva
              e con nessun autoveicolo
              <p>


         <li><i>PartitaIva : (Off) --&gt; PartitaIva</i><br>
              precondizione e postcondizioni per <i>PartitaIva(o) = p</i><br>
              <u>pre</u>: nessuna<br>
              <u>post</u>: <i>p</i> &egrave; la partita iva dell'officina
              <i>o</i>
              <p>

         <li><i>Arriva : (Off, Auto) --&gt; Off</i><br>
              precondizione e postcondizioni per
              <i>Arriva(o,a) = oo</i><br>
              <U>pre</u>:  nessuna<br>
              <U>post</u>: <i>oo</i> &egrave; l'officina ottenuta da
              <i>o</i> aggiungendo l'auto <i>a</i> e attribuendo a tale
              auto lo status di "inRiparazione"
              <p>

         <li><i>Parte : (Off, Auto) --&gt; Off</i><br>
              precondizioni e postcondizioni per<I> Parte(o,a) = oo</i> <br>
              <u>pre</u>:  <i>a</i> &egrave;
              presente nell'officina  <i>o</i> con status "pronta"<br>
              <u>post</u>: <i>oo</i> &egrave; l'officina ottenuta da
              <i>o</i> eliminando l'auto  <i>a</i>
              <p>

         <li><i>InRiparazione : (Off, Auto) --&gt; Boolean</i><br>
              precondizione e postcondizioni per
              <i>InRiparazione(o,a) = b</i><br>
              <u>pre</u>: nessuna <br>
              <u>post</u>: <i>b = true</i> se
              <i>a</i> &egrave; presente nell'officina <i>o</i> ed
              ha lo status "inRiparazione"; <i>b=false</i> altrimenti <p>

         <li><i>Pronta : (Off, Auto) --&gt; Boolean</i><br>
              precondizione e postcondizioni per
              <i>Pronta(o,a) = b</i><br>
              <u>pre</u>: nessuna <br>
              <u>post</u>: <i>b = true</i> se
              <i>a</i> &egrave; presente nell'officina <i>o</i> ed
              ha lo status "pronta"; <i>b=false</i> altrimenti <p>

         <li><i>Approntata(Off, Auto) --&gt; Off</i><br>
              precondizioni e postcondizioni per
              <i>Approntata(o,a) = oo</i><br>
              <u>pre</u>:  <i>a</i> &egrave;
              presente nell'officina  <i>o</i> con status "inRiparazione"<br>
              <u>post</u>: <i>oo</i> &egrave; l'officina ottenuta da
              <i>o</i> cambiando lo status dell'auto <i>a</i> in "pronta"
              <p>

       <dt><b><u>FineTipoAstratto</u></b></dt>
</dl>
<p>
Si vuole scrivere una classe C++ <code>Officina</code> che realizzi il tipo
astratto <i>Officina</i>, considerando che per riferirsi al tipo astratto
<i>Auto</i> &egrave; necessario utilizzare la classe <code>Auto</code>
che si suppone gi&agrave; realizzata, della quale per&ograve; non &egrave;
nota la definizione. Inoltre si assuma che la partita iva sia rappresentata da
una stringa.


<p><b>Domanda 1</b>&nbsp;&nbsp; Si illustrino le scelte di progetto relative
alla realizzazione del tipo astratto <i>Officina</i> mediante la classe C++
<code>Officina</code>. </p>

<p><b>Domanda 2</b>&nbsp;&nbsp; Si scriva la classe <code>Officina</code> (file
.h e file .cpp) secondo le scelte di progetto illustrate per la Domanda
1. Scrivere il codice di tutte le funzioni pubbliche e private della
classe. </p>

<p><b>Problema 2</b>&nbsp;&nbsp; Realizzare una funzione esterna (non friend)
della classe <code>Officina</code> che dato un'officina <i>o</i> ed una lista
<i>l</i> di record aventi la forma seguente:
<pre>
struct Rec {
  Auto* auto;
  int status;
  Rec* next;
};
</pre>
dove i valori del campo status non sono significativi,
aggiorni il campo <tt>status</tt> dei record in <i>l</i> ponendolo a <i>0</i>
se l'auto denotata dal campo <tt>auto</tt> &egrave; ha lo status
"inRiparazione" in <i>o</i>, a <i>1</i> se l'auto ha status "pronta" e a
<i>-1</i> se l'auto non e' presente in <i>o</i>.  </P>

<b><p>Problema 3</b>&nbsp;&nbsp; Illustrare il significato delle nozioni di
coesione, information hiding, accoppiamento, e interfacciamento esplicito, e
descrivere i criteri fondamentali che legano tali nozioni con la qualita' della
modularizzazione.

</body>
</html>
