<!--
This file was generated by Web C Plus Plus software v0.7.9
Webcpp Copyright (C)2001, (C)2002 Jeffrey Bakker under the GNU GPL
Get webcpp at http://webcpp.sf.net
-->

<html>
<head>
<title>Queue.java</title>
<style type="text/css">

/** Webcpp v0.7.0+ compatible StyleSheet http://webcpp.sf.net **/
/** Theme: typical **/

body
{
background-color: #ffffff
}

a:link    {color:#ff0000}
a:visited {color:#666666}
a:active  {color:#0000ff}
a:hover   {color:#00b800}

pre
{
color: #000000
}

font
{
font-size:100%
}

font.preproc
{
color: #00b800
}

font.numbers
{
color: #a900a9
}

font.strings
{
color: #ff0000
}

font.keyword
{
color: #0000ff;
font-weight: bold
}

font.comment
{
color: #666666;
font-style: italic
}

</style>
</head>
<body>
<pre>

<font CLASS=keyword>package</font> asd_library.queue;

<font CLASS=keyword>import</font> java.util.*;

<font CLASS=comment>/**
 * Implementation of the abstract data type Queue
 */</font>

<font CLASS=keyword>public</font> <font CLASS=keyword>class</font> Queue <font CLASS=keyword>implements</font> Queue_adt, Cloneable {

  <font CLASS=keyword>private</font> java.util.LinkedList list= <font CLASS=keyword>new</font> java.util.LinkedList();

  <font CLASS=keyword>public</font> Queue() {
  }

  <font CLASS=comment>/**
   * Stores an item at the queue end.
   * @param el object to store.
   */</font>

  <font CLASS=keyword>public</font> <font CLASS=keyword>void</font> enqueue(Object el){
    list.add(el);
  }

  <font CLASS=comment>/**
  * Retrieves the item from the queue head and removes it.
  * @return the object deleted from the queue.
  */</font>
  <font CLASS=keyword>public</font> Object dequeue(){
    <font CLASS=keyword>return</font>  list.<font CLASS=comment>removeFirst();</font>
  }


  <font CLASS=comment>/**
   * Retrieves the item from the queue head but doesn't remove it.
   * @return the object at the head of the queue.
   */</font>
  <font CLASS=keyword>public</font> Object firstEl(){
    <font CLASS=keyword>return</font> list.getFirst();
  }


  <font CLASS=comment>/**
   * Verifies if the queue is empty.
   * @return true if the queue is empty, false otherwise.
   */</font>
  <font CLASS=keyword>public</font> <font CLASS=keyword>boolean</font> isEmpty(){
    <font CLASS=keyword>return</font> list.isEmpty();
  }

  <font CLASS=comment>/**
   * Returns a string representation of the queue.
   * The string representation consists of a list of the collection's elements
   * in the order they are returned by its iterator, enclosed in square brackets
   * ("[]"). Adjacent elements are separated by the characters ", " (comma and
   * space). Elements are converted to strings as by String.valueOf(Object).
   * @return a &lt;b&gt;String&lt;/b&gt; that represents the queue.
   */</font>
  <font CLASS=keyword>public</font> String toString(){
    <font CLASS=keyword>return</font> list.toString();
    }

    <font CLASS=comment>/**
     * Returns a shallow copy of this Queue. (The elements themselves are not cloned.)
     * @return a shallow copy of this Queue instance.
     */</font>
    <font CLASS=keyword>public</font> Object clone(){
    <font CLASS=keyword>try</font>{
      Queue q = (Queue)<font CLASS=keyword>super</font>.clone();
      q.list = (java.util.LinkedList) list.clone();
      <font CLASS=keyword>return</font> q;
    }<font CLASS=keyword>catch</font>(CloneNotSupportedException e){
      <font CLASS=comment>//It mustn't happen</font>
      System.out.println(<font CLASS=strings>"Cloning not allowed"</font>);
      <font CLASS=keyword>return</font> <font CLASS=keyword>this</font>;
    }
  }


  <font CLASS=comment>/**
   * Compares the specified object with this queue for equality.
   * Returns true if and only if the specified object is also a queue, both
   * queues have the same size, and all corresponding pairs of elements in the
   * two queues are equal. (Two elements e1 and e2 are equal
   * if (e1==null ? e2==null : e1.equals(e2)).) In other words, two queues are
   * defined to be equal if they contain the same elements in the same order.
   * @param q the object to be compared for equality with this queue
   * @return true if the specified object is equal to this queue.

   */</font>
  <font CLASS=keyword>public</font> <font CLASS=keyword>boolean</font> equals(Object q)
  {
    <font CLASS=keyword>return</font> list.equals(((Queue)q).list);
  }


  <font CLASS=comment>/**
   * Returns a list-iterator of the elements in this queue (in proper sequence)
   * @return a ListIterator of the elements in this queue.
   */</font>
  <font CLASS=keyword>public</font> ListIterator listIterator(){

    <font CLASS=keyword>return</font> <font CLASS=keyword>this</font>.list.listIterator();

  }



}



</pre>



</body>
</html>
