<html>
<head>
<title>Programma del corso</title>
<style type="text/css">
dt { font-weight: bold; }
tt { color: brown; }
</style>
</head>

<body>

<h1>Programma del corso</h1>
<h4>Fondamenti di informatica<br>
Ingegneria gestionale</br>
Anno accademico 2003-2004</h4>

<p>
<b>Questo programma &egrave; provvisorio: il programma
definitivo verr&agrave; pubblicato alla fine del corso.</b>
</p>

<dl>

<dt>struttura del calcolatore
<dd>memoria, CPU, dispostivi di I/O

<dt>variabili scalari
<dd>variabili <tt>int</tt> e <tt>double</tt>, assegnazioni,
semplici espressioni, stato della memoria durante
l'esecuzione, copia di valori da una variabile a un'altra,
la divisione intera, problema della precisione finita,
rappresentazione con mantissa ed esponente

<dt>oggetti predefiniti
<dd>rappresentazione di oggetti con pi&ugrave;
caratteristiche, gli oggetti <tt>Point</tt>, creazione di un
oggetto, componenti di un oggetto, rappresentazione in
memoria di variabili e oggetti, metodi, copiare un oggetto,
oggetti <tt>Rectangle</tt>

<dt>metodi di oggetti predefiniti
<dd>invocare un metodo, argomenti e valore di ritorno, uso
del valore di ritorno in una espressione, metodi di
<tt>Rectangle</tt>, metodi che creano oggetti

<dt>le stringhe
<dd>dichiarazione e creazione, metodi, indici,
sottostringhe, concatenazione, il tipo carattere, trovare un
singolo carattere in una posizione di una stringa

<dt>definire nuove classi senza metodi
<dd>definizione componenti, differenza fra componenti e
variabili, uso delle nuove classi, oggetti con componenti
che sono altri oggetti, creazione prima dell'uso

<dt>definire metodi per le nuove classi
<dd>metodo come dispositivo (con in e out), sintassi della
definizione di metodo, esecuzione di un metodo, definire il
corpo di un metodo, punto di ritorno, l'oggetto di
invocazione, differenza variabili locali/componenti, metodi
con argomenti, differenza variabili locali/parametri
formali, metodi con valore di ritorno, come si progettano i
metodi (simulazione di esecuzione del corpo)

<dt>programmi con input
<dd>il metodo <tt>JOptionPane.showInputDialog</tt>

<dt>istruzioni condizionali
<dd>sintassi, condizioni elementari, differenza fra
assegnamento ed uguaglianza, condizioni opposte,
condizionali senza <tt>else</tt>, raffinare un algoritmo,
condizioni nidificati, blocchi=istruzioni, operatori
booleani, ambiguit&agrave; sintattica dei condizionali

<dt>cicli
<dd>cicli definiti, unfolding di un ciclo definito, forma
generale del ciclo <tt>for</tt>, unfolding nel caso
generale, cicli con decremento e incremento diverso da uno,
istruzioni e blocchi come corpo del ciclo, ciclo
<tt>while</tt>, unfolding ciclo <tt>while</tt>, equivalenza
<tt>for</tt>-<tt>while</tt>, cicli indefiniti, il metodo del
risultato parziale, applicazione: accumulatore, principio di
induzione applicata ai cicli, condizioni necessarie per
garantire la correttezza dei cicli, operazioni logiche su
insiemi con il metodo del risultato parziale, uscire dai
cicli con <tt>break</tt>, differenza <tt>break</tt>-rendere
falsa la condizione di uscita, matrici (tavola pitagorica),
cicli nidificati, indentazione del codice, cicli
<tt>do-while</tt>

<dt>il tipo booleano
<dd>condizioni, variabili, operatori booleani, tavole di
verit&agrave;, booleani come valori di ritorno, uso del
valore di ritorno, metodo del risultato parziale

<dt>i file
<dd>memoria di lavoro e di massa, file e cartelle, la classe
<tt>File</tt>, differenza fra il file e l'oggetto file,
metodi di <tt>File</tt>, lettura del file con le classi
<tt>FileReader</tt> e <tt>BufferedReader</tt>, leggere un
file fino alla fine, lettura per caratteri e per righe,
conversione stringa-intero, trovare il minimo con il metodo
del risultato parziale, scrittura su file con
<tt>FileWriter</tt> (carattere per carattere) e con
<tt>BufferedWriter</tt> (riga per riga), il metodo
<tt>flush</tt>

<dt>la memoria e gli oggetti
<dd>rappresentazione in memoria di variabili ed oggetti,
indirizzi di memoria (=numeri), creazione di un oggetto,
cosa succede quando si usa un oggetto, copia di valori da
una variabile all'altra, oggetti non pi&ugrave; accessibili,
oggetti con dentro riferimenti ad altri oggetti, confronto
fra variabili, rappresentazione grafica con freccie, il
metodo <tt>equals</tt>, definire un metodo che confronta
oggetti, l'eccezione delle stringhe costanti, passaggio dei
parametri=assegnamento

<dt>gli applet
<dd>pagine html con il tag <tt>applet</tt>, come si scrivono
gli applet, il metodo <tt>paint</tt>, il sistema di
coordinate degli applet, disegnare linee, rettangoli, cerchi

<dt>conversione dati scalari
<dd>conversione, troncamento, arrotondamento

<dt>metodi del programma
<dd>differenza metodo del programma e delle classi

<dt>parametri e sovraccarico
<dd>memoria dei metodi e heap, passaggio di un oggetto a un
metodo, sovraccarico, invocazione di un metodo sovraccarico,
valore di ritorno per un metodo sovraccarico, firma di un
metodo, invocazione di un metodo all'interno della stessa
classe

<dt><tt>null</tt>
<dd>rappresentazione in memoria, componenti e metodi,
oggetti non pi&ugrave; accessibili, differenza fra
<tt>null</tt> e la stringa vuota, variabili non
inizializzate, inizializzazione automatica delle componenti
degli oggetti, passare <tt>null</tt> a un metodo che
modifica il parametro formale

<dt>metodi statici
<dd>sintassi, differenza metodi statici e dinamici,
somiglianza metodi statici e di programma, invocazione di un
metodo statico di un'altra classe, differenza oggetto di
invocazione-oggetto passato come parametro

<dt>costruttori
<dd>ridefinire il costruttore senza argomenti, creazione di
un oggetto quando il costruttore &egrave; ridefinito (cosa
succede in memoria), costruttori con argomenti, ridefinire
un costruttore con argomenti, differenza fra i metodi e i
costruttori, non trasmissione ereditaria dei costruttori,
costruttori sovraccarichi

<dt>modificatori di accesso e incapsulamento
<dd>sintassi, componenti private, accesso mediante metodi a
componenti private, vantaggi dell'incapsulamento, oggetti
immutabili, accessi ed ereditariet&agrave;

<dt>array
<dd>dichiarazione, creazione, accesso alle componenti,
rappresentazione grafica, cicli sui vettori, vettori di
oggetti, passare vettori a metodi, lunghezza di un vettore,
il metodo del risultato parziale applicato ai vettori, array
bidimensionali, argomento di <tt>main</tt>, cosa succede
quando si esegue un programma, uso degli argomenti passati a
un programma, ricerca in un vettore ordinato, creazione
statica degli array, copiare un vettore, rappresentare
insiemi usando vettori

</dl>

</body>
</html>
