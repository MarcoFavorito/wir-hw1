<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0073)http://www.dis.uniroma1.it/~calvanes/didattica/appelli-fond-c/precedenti/ -->
<HTML><HEAD><TITLE>Esercizio d'esame</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="MSHTML 5.50.4134.600" name=GENERATOR>
<META content=Fondamenti name=subject>
<META content="Mozilla/4.7 (Macintosh; I; PPC) [Netscape]" 
name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#551a8b aLink=#0000ff link=#0000ff bgColor=#ffffff>
<CENTER>
<H6><B><U><FONT size=+2>Fondamenti di Informatica</FONT></U></B></H6></CENTER>
<CENTER>
<H6><B><U><FONT size=+2>Corso di Laurea di Ingegneria 
Elettronica</FONT></U></B></H6></CENTER>
<CENTER>
<BR>&nbsp;</DIR><B><FONT size=+1>Esercizio</FONT></B> 
</center>
<P><FONT size=+1>Per lo svolgimento di un esame scritto di Fondamenti di 
Informatica, un docente prepara una lista degli studenti iscritti.</FONT> 
<BR><FONT size=+1>La lista è rappresentata mediante record e puntatori.</FONT> 
<BR><FONT size=+1>Ogni nodo della lista contiene le seguenti informazioni 
relative ad uno studente:</FONT> <BR><FONT size=+1>- nome (stringa di al più 20 
caratteri)</FONT> <BR><FONT size=+1>- cognome (stringa di al più 20 
caratteri)</FONT> <BR><FONT size=+1>- matricola (stringa di 8 caratteri)</FONT> 
<BR><FONT size=+1>- numero_fila (intero: la fila di banchi in cui lo studente si 
siede)</FONT> <BR><FONT size=+1>- posiz_fila (carattere indicante il posto della 
fila dove lo studente si siede)</FONT> 
<P><FONT size=+1>Gli studenti vengono fatti entrare nell'aula dello scritto 
seguendo la lista. La lista viene modificata assegnando ad ogni studente 
<U>presente</U> una posizione nell'aula (es. 2D = quarto posto della seconda 
fila). Se uno studente iscritto è assente, nei campi numero_fila e posiz_fila si 
mette 0.</FONT> <BR>&nbsp;
<DIR><FONT size=+1><B>1) </B>
Definire un programma C contenente le dichiarazioni 
e le funzioni adeguate a risolvere i problemi di cui ai successivi punti 2) e 
3).</FONT> 
<P><FONT size=+1>Chiamare TipoListaAppello il tipo della lista di studenti 
descritta sopra.</FONT> 
<P><FONT size=+1><B>2) </B>
Scrivere una funzione ELIMINA_ASSENTI che, ricevendo 
come parametro una lista di tipo TipoListaAppello, trattata come sopra 
descritto, elimini da essa tutti gli studenti che risultano assenti.</FONT> 
<P><FONT size=+1><B>3) </B>
Scrivere una funzione che, ricevendo come parametri 
una lista di tipo TipoListaAppello, trattata come sopra descritto e due 
numeri di matricola, stampi un messaggio di "warning" se gli studenti 
corrispondenti sono <I>contigui</I>.</FONT> 
<P><FONT size=+1><B>NB</B> Due studenti sono contigui se</FONT> 
<DIR><FONT size=+1>- occupano posizioni vicine sulla medesima 
fila</FONT></DIR><FONT size=+1>oppure se</FONT> 
<DIR><FONT size=+1>- occupano la medesima posizione su file 
adiacenti</FONT></DIR><FONT size=+1>Ad esempio, 2A e 2B sono contigui; 2A e 2C 
no; 4C e 3C sono contigui; 4C e 3D no</FONT>
<BR><FONT size=+1>Il 
messaggio di warning è del tipo "ATTENZIONE: STUDENTI CONTIGUI".</FONT> 
</DIR>
<BR>&nbsp; 
</BODY></HTML>
