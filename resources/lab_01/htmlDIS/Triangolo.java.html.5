<!--
This file was generated by Web C Plus Plus software v0.7.9
Webcpp Copyright (C)2001, (C)2002 Jeffrey Bakker under the GNU GPL
Get webcpp at http://webcpp.sf.net
-->

<html>
<head>
<title>Triangolo.java</title>
<style type="text/css">

/** Webcpp v0.7.0+ compatible StyleSheet http://webcpp.sf.net **/
/** Theme: typical **/

body
{
background-color: #ffffff
}

a:link    {color:#ff0000}
a:visited {color:#666666}
a:active  {color:#0000ff}
a:hover   {color:#00b800}

pre
{
color: #000000
}

font
{
font-size:100%
}

font.preproc
{
color: #00b800
}

font.numbers
{
color: #a900a9
}

font.strings
{
color: #ff0000
}

font.keyword
{
color: #0000ff;
font-weight: bold
}

font.comment
{
color: #666666;
font-style: italic
}

</style>
</head>
<body>
<pre>

<font CLASS=keyword>import</font> javax.swing.*;
<font CLASS=keyword>import</font> java.awt.geom.*;
<font CLASS=keyword>import</font> java.awt.*;

<font CLASS=comment>/** 
    Permette di creare un oggetto triangolo e fornisce dei metodi per il calcolarne alcune proprieta' fondamentali quali l'area ed il perimetro oltre ad un metodo per il disegno del triangolo. 
<font CLASS=comment>*/</font></font>
<font CLASS=keyword>public</font> <font CLASS=keyword>class</font> Triangolo {
	
	<font CLASS=comment>/** 
	    Costruisce un triangolo degenere con coordinate dei vertici nell'origine
	*/</font>
	<font CLASS=keyword>public</font> Triangolo() {
		
		v1=<font CLASS=keyword>new</font> Point2D.Double();
		v2=<font CLASS=keyword>new</font> Point2D.Double();
		v3=<font CLASS=keyword>new</font> Point2D.Double();
							
		a=<font CLASS=numbers>0</font>;
	    b=<font CLASS=numbers>0</font>;
	    c=<font CLASS=numbers>0</font>;
	
	}
	
	
	<font CLASS=comment>/** 
	    Costruisce un triangolo con coordinate dei vertici (x1,y1), (x2,y2), (x3,y3). Se il triangolo è degenere stampa un opportuno messaggio

		@param x1 ascissa del primo vertice
		@param x2 ascissa del secondo vertice
		@param x3 ascissa del terzo vertice
		@param y1 ordinata del primo vertice
		@param y2 ordinata del secondo vertice
		@param y3 ordinata del terzo vertice
	*/</font>
	<font CLASS=keyword>public</font> Triangolo(<font CLASS=keyword>double</font> x1,<font CLASS=keyword>double</font> x2, <font CLASS=keyword>double</font> x3, <font CLASS=keyword>double</font> y1, <font CLASS=keyword>double</font> y2, <font CLASS=keyword>double</font> y3) {
		
		v1=<font CLASS=keyword>new</font> Point2D.Double(x1,y1);
		v2=<font CLASS=keyword>new</font> Point2D.Double(x2,y2);
		v3=<font CLASS=keyword>new</font> Point2D.Double(x3,y3);
			
		<font CLASS=keyword>double</font>	determinante=(v1.getX()-v3.getX())*(v2.getY()-v1.getY())-(v2.getX()-v1.getX())*(v1.getY()-v3.getY());
	
		<font CLASS=keyword>if</font>  (Math.abs(determinante)&lt;EPSILON)
			System.out.println(<font CLASS=strings>"Il triangolo e'degenere.\n"</font>);
			
		a=v1.distance(v2);
	    b=v2.distance(v3);
	    c=v1.distance(v3);
	
	}
	
	<font CLASS=comment>/** 
	   Restituisce il perimetro del triangolo
	   
	   @return il perimetro del triangolo
	*/</font>
	<font CLASS=keyword>public</font> <font CLASS=keyword>double</font> perimetro(){
		
		<font CLASS=keyword>return</font> a+b+c;				
		
	}
	
	<font CLASS=comment>/** 
	   Restituisce l'area del triangolo
	   
	   @return l'area del triangolo
	*/</font>
	<font CLASS=keyword>public</font> <font CLASS=keyword>double</font> area (){
		
		<font CLASS=keyword>double</font> s=<font CLASS=keyword>this</font>.perimetro()/<font CLASS=numbers>2</font>;
		
		<font CLASS=keyword>return</font> Math.sqrt(s*(s-a)*(s-b)*(s-c));
		
	}
	
	<font CLASS=comment>/** 
	   Restituisce le coordinate (X,Y) del baricentro del triangolo
	   
	   @return il baricentro del triangolo
	*/</font>
	<font CLASS=keyword>public</font> Point2D.Double baricentro(){
		
		Point2D.Double baricentro=<font CLASS=keyword>new</font> Point2D.Double((v1.getX()+v2.getX()+v3.getX())/<font CLASS=numbers>3</font>,(v1.getY()+v2.getY()+v3.getY())/<font CLASS=numbers>3</font>);
		
		<font CLASS=keyword>return</font> baricentro;
		
	}
	
	<font CLASS=comment>/** 
	   Disegna il triangolo in un contesto grafico specificato
	   
	   @param g il contesto grafico in cui disegnare il triangolo
	*/</font>
	<font CLASS=keyword>public</font> <font CLASS=keyword>void</font> disegna(Graphics2D g){
		
		Line2D.Double linea1=<font CLASS=keyword>new</font> Line2D.Double(v1,v2);
		Line2D.Double linea2=<font CLASS=keyword>new</font> Line2D.Double(v3,v2);
		Line2D.Double linea3=<font CLASS=keyword>new</font> Line2D.Double(v1,v3);
		
		g.draw(linea1);
		g.draw(linea2);
		g.draw(linea3);	
	}
	
	<font CLASS=comment>/** 
	   Verifica se il triangolo e' rettangolo
	   
	   @return restituisce vero se il triangolo e' rettangolo, falso altrimenti
	*/</font>
	
	<font CLASS=keyword>public</font> <font CLASS=keyword>boolean</font> isRettangolo(){
		
		<font CLASS=keyword>if</font>(Math.abs(Math.pow(a,<font CLASS=numbers>2</font>)+Math.pow(b,<font CLASS=numbers>2</font>)-Math.pow(c,<font CLASS=numbers>2</font>))&lt;EPSILON)
			<font CLASS=keyword>return</font> <font CLASS=keyword>true</font>;
		<font CLASS=keyword>if</font>(Math.abs(Math.pow(a,<font CLASS=numbers>2</font>)+Math.pow(c,<font CLASS=numbers>2</font>)-Math.pow(b,<font CLASS=numbers>2</font>))&lt;EPSILON)
			<font CLASS=keyword>return</font> <font CLASS=keyword>true</font>;
		<font CLASS=keyword>if</font>(Math.abs(Math.pow(c,<font CLASS=numbers>2</font>)+Math.pow(b,<font CLASS=numbers>2</font>)-Math.pow(a,<font CLASS=numbers>2</font>))&lt;EPSILON)
			<font CLASS=keyword>return</font> <font CLASS=keyword>true</font>;
			
		<font CLASS=keyword>return</font> <font CLASS=keyword>false</font>;
	}
	
	<font CLASS=comment>/** 
	   Verifica se il triangolo e' ottusangolo
	   
	   @return restituisce vero se il triangolo e' ottusangolo, falso altrimenti
	*/</font>
	<font CLASS=keyword>public</font> <font CLASS=keyword>boolean</font> isOttusangolo(){
		<font CLASS=keyword>if</font>((Math.pow(a,<font CLASS=numbers>2</font>)+Math.pow(b,<font CLASS=numbers>2</font>)-Math.pow(c,<font CLASS=numbers>2</font>))&lt;<font CLASS=numbers>0</font>)
			<font CLASS=keyword>return</font> <font CLASS=keyword>true</font>;
		<font CLASS=keyword>if</font>((Math.pow(a,<font CLASS=numbers>2</font>)+Math.pow(c,<font CLASS=numbers>2</font>)-Math.pow(b,<font CLASS=numbers>2</font>))&lt;<font CLASS=numbers>0</font>)
			<font CLASS=keyword>return</font> <font CLASS=keyword>true</font>;
		<font CLASS=keyword>if</font>((Math.pow(c,<font CLASS=numbers>2</font>)+Math.pow(b,<font CLASS=numbers>2</font>)-Math.pow(a,<font CLASS=numbers>2</font>))&lt;<font CLASS=numbers>0</font>)
			<font CLASS=keyword>return</font> <font CLASS=keyword>true</font>;
			
		<font CLASS=keyword>return</font> <font CLASS=keyword>false</font>;
		
	}
	
	<font CLASS=comment>/** 
	   Trasla il triangolo nel piano xy
	   
	   @param x traslazione orizzontale
	   @param y traslazione verticale
	*/</font>
	<font CLASS=keyword>public</font> <font CLASS=keyword>void</font> translate(<font CLASS=keyword>double</font> x,<font CLASS=keyword>double</font> y){
		v1.setLocation(v1.getX()+x, v1.getY()+y);
		v2.setLocation(v2.getX()+x, v2.getY()+y);
		v3.setLocation(v3.getX()+x, v3.getY()+y);
		
	}
	
	<font CLASS=comment>/** 
	   Modifica le coordinate del triangolo
	   
	   	@param x1 nuova ascissa del primo vertice
		@param x2 nuova ascissa del secondo vertice
		@param x3 nuova ascissa del terzo vertice
		@param y1 nuova ordinata del primo vertice
		@param y2 nuova ordinata del secondo vertice
		@param y3 nuova ordinata del terzo vertice
	*/</font>
	<font CLASS=keyword>public</font> <font CLASS=keyword>void</font> setCoordinates(<font CLASS=keyword>double</font> x1,<font CLASS=keyword>double</font> x2, <font CLASS=keyword>double</font> x3, <font CLASS=keyword>double</font> y1, <font CLASS=keyword>double</font> y2, <font CLASS=keyword>double</font> y3) {
		
		v1.setLocation(x1,y1);
		v2.setLocation(x2,y2);
		v3.setLocation(x3,y3);
		
	}
	
	
	
	<font CLASS=keyword>private</font> Point2D.Double v1, v2, v3;    			  <font CLASS=comment>// i vertici del triangolo</font>
	<font CLASS=keyword>private</font> <font CLASS=keyword>double</font> a, b, c; 	 			  		  <font CLASS=comment>// le lunghezze dei lati del triangolo</font>
	<font CLASS=keyword>private</font> <font CLASS=keyword>final</font> <font CLASS=keyword>double</font> EPSILON=<font CLASS=numbers>0.00000000001</font>;		  <font CLASS=comment>// tolleranza per confronti tra reali</font>
	
}



</pre>



</body>
</html>
