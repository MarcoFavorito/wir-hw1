<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Generator" content="Microsoft Word 97">
   <meta name="Template" content="C:\Programmi\Office\html.dot">
   <meta name="GENERATOR" content="Mozilla/4.61 [en] (WinNT; I) [Netscape]">
   <title>progr</title>
<!-- Changed by: , 17-Dec-1998 -->
</head>
<body bgcolor="#FFFFFF">

<center><b><u><font size=+1>LINGUAGGI E TRADUTTORI</font></u></b>
<br>&nbsp;<i><font size=+1>Prof. Daniele Nardi</font></i>
<br><b><font size=+1>Programma Preliminare 2002/2003</font></b></center>

<dl>
<dt>

<hr WIDTH="100%"><b>PARTE&nbsp; I: Progetto di Linguaggie Traduttori</b></dt>

<dt>
<i><u>Analisi Lessicale</u></i></dt>

<dt>
Richiami su linguaggi regolari. Progetto e realizzazione di analizzatori
lessicali (LEX, F-LEX, JAVALEX).</dt>

<dt>
<i><u>Analisi sintattica top-down</u></i></dt>

<dt>
Richiami su linguaggi formali, grammatiche e gerarchia di Chomsky, alberi
di derivazione e ambiguit&agrave;. Funzioni di un analizzatore sintattico.
Grammatiche non contestuali e analisi per discesa ricorsiva, grammatiche
LL(1).</dt>

<dt>
<i><u>Analisi sintattica bottom-up</u></i></dt>

<dt>
Progetto e realizzazione di analizzatori sintattici (BISON-YACC-CUP).</dt>

<dt>
<i><u>Grammatiche ad Attributi</u></i></dt>

<dt>
Progetto e realizzazione di traduttori guidati dalla sintassi (BISON-YACC-CUP).</dt>

<dt>
<i><u>Linguaggi per la specifica di documenti</u></i></dt>

<dt>
Linguaggi per la specifica di documenti in Internet. Gli standard SGML
e XML. Document Type Definitions: metodi di analisi sintattica per i documenti
specificati tramite SGML.</dt>

<dt>
<i><u>Preogetto di Traduttori tramite XML</u></i></dt>

<dt>
Realizzazione di traduttori con i fogli di stile. Document Object Model
e sue applicazioni.</dt>

<dt>

<hr WIDTH="100%"></dt>

<dt>
<b>PARTE&nbsp; II: Linguaggi e Compilatori</b></dt>

<dt>
<i><u>Progetto di compilatori e traduttori</u></i></dt>

<dt>
Implementazione di un linguaggio: Interprete, Compilatore e ambiente di
programmazione.Traduttori. Struttura di un compilatore.</dt>

<dt>
<i><u>Analisi Lessicale</u></i></dt>

<dt>
Espressioni regolari e corrispondenza con automi. Trasformazione da automa
non-deterministico ad automa deterministico. Funzioni di un analizzatore
lessicale. Specifica e riconoscimento di token.</dt>

<dt>
<i><u>Analisi sintattica</u></i></dt>

<dt>
Analisi sintattica guidata da tabella: analisi top-down LL(1); analisi
bottom-up: grammatiche a precedenza di operatori, grammatiche LR ed LALR.
Uso di grammatiche ambigue.</dt>

<dt>
<i><u>Grammatiche ad Attributi</u></i></dt>

<dt>
Definizioni orientate alla sintassi: attributi sintetizzati ed ereditati.
Valutazione di espressioni con grammatiche ad attributi. Metodi di valutazione
degli attributi. Traduzione top-down e bottom-up nelle grammatiche con
attributi.</dt>

<dt>
<i><u>Strumenti di sviluppo per applicazioni Web</u></i></dt>

<dt>
Strumenti per lo sviluppo di applicazioni Web. Ruoli di XM L nella progettazione
di applicazioni Web. JSP e l'Ambiente di sviluppo JAVA/XML, Ambiente .NET.
Metodologia di progetto di applicazioni Web (basata su XML).</dt>

<br><i><u>Analisi semantica</u></i>
<br>Sistemi di tipi e controllo di tipi, espressioni di tipo ed equivalenza
delle espressioni di tipo, conversioni di tipo,
<br>overloading, polimorfismo.
<dt>
<i><u>Ambiente di esecuzione e generazione codice intermedio</u></i></dt>

<br>Organizzazione della memoria. Allocazione statica e dinamica. Campo
d'azione ed accesso ai simboli non locali. Passaggio
<br>di parametri. Costruzione della tabella dei simboli Garbage Collection.
La gestione della memoria nei
<br>linguaggi ad oggetti.
<br><i><u>Generazione ed ottimizzazione del codice</u></i>
<br>Codice intermedio a tre indirizzi. Generazione del codice intermedio,
per le assegnazioni e&nbsp; per le istruzioni di controllo.
<br>Analisi delle dichiarazioni e costruzione della tabella dei simboli.
Generazione del codice intermedio per le espressioni
<br>booleane tramite backpatching. Modello del processore. Allocazione
della memoria (statica e dinamica), blocchi e grafo del flusso di controllo.
Generatore di codice per un blocco di base.&nbsp; Struttura di un ottimizzatore
di codice e principali tipi di ottimizzazione.
<br><i><u>Implementazione di linguaggi non imperativi</u></i>
<br>Linguaggi non Von Neumann: orientati ad oggetti, funzionali, logici
[5]. Nucleo applicativo del LISP ed il relativo meta
<br>interprete [6]. Costruzione di traduttori guidati dalla sintassi in
PROLOG [7].
<br>&nbsp;
<dt>

<hr WIDTH="100%"><b><font size=+2>Libri di testo</font></b></dt>

<dt>
[LT] A.V. Aho, R. Sethi, J.D. Ullman, Compilers - Principles, Techniques
and tools, Addison-Wesley, 1986.</dt>

<dt>
[XML] Diego Calvanese, Luigi Dragone, Daniele Nardi, Viviana Olivieri.
<a href="dispense/xml.ps.gz">XML</a>,
Dispensa per il corso di Linguaggi e Traduttori, 2000.</dt>
</dl>
<b><font size=+1>Altri Riferimenti</font></b>
<ol>
<li>
A.W. Appel, Modern Compiler Implementation using JAVA, Cambridge Universiy
Press, 1998<font size=+1>.</font></li>
</ol>

</body>
</html>
