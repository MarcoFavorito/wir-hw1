<html>
<head>
<title>
Diploma Universitario di Ingegneria Informatica,
Esame di Fondamenti di Informatica II - secondo modulo,
A.A. 1999/2000 - Appello del 14 settembre 2000
</title>
</head>

<body>

<h3 align="center">
Diploma Universitario di Ingegneria Informatica<br>
Esame di Fondamenti di Informatica II - secondo modulo <br>
A.A. 1999/2000 - Appello del 14 settembre 2000</h3>

<b>Problema 1</b>&nbsp;&nbsp; Si consideri la seguente specifica del tipo
astratto <i>ClasseAsilo</i>:

<dl>
  <dt><b><u>TipoAstratto</u></b> <i>ClasseAsilo</i><p>
  <dt><b><u>Sorte</u></b> <i>CA</i> (sorta per il dominio di interesse)<p>
  <dt><b><u>Funzioni</u></b><p>

       <ul>
         <li><i>Crea : (Maestra) --&gt; CA</i> <br>
              precondizioni e postcondizioni per <i>crea(m) = c</i> <br>
              <u>pre</u>: nessuna <br>
              <u>post</u>: <i>c</i> &egrave;
              una classe d'asilo avente come maestra <i>m</i>
              e con nessun bambino
              <p>


         <li><i>Maestra : (CA) --&gt; Maestra</i><br>
              precondizione e postcondizioni per <i>Maestra(c) = m</i><br>
              <u>pre</u>: nessuna<br>
              <u>post</u>: <i>m</i> &egrave; la maestra della classe d'asilo
              <i>c</i> <p>

         <li><i>NuovoIscritto : (CA,Bambino) --&gt; CA</i><br>
              precondizione e postcondizioni per
              <i>NuovoIscritto(c,b) = d</i><br>
              <U>pre</u>:  <i>b</i> non &egrave;
              iscritto alla classe <i>c</i> (n&eacute; lo &egrave; mai stato)<br>
              <U>post</u>: <i>d</i> &egrave; la classe d'asilo ottenuta
              da <i>d</i> aggiungendo il bambino <i>b</i> agli iscritti
              <p>

         <li><i>Rinuncia : (CA,Bambino) --&gt; CA</i><br>
              precondizioni e postcondizioni per<I> Rinuncia(c,b) = d</i> <br>
              <u>pre</u>:  <i>b</i> &egrave;
              iscritto alla classe <i>c</i><br>
              <u>post</u>: <i>d</i> &egrave; la classe d'asilo ottenuta da
              <i>c</i> cambiando lo status di <i>b</i> da iscritto a
              rinunciatario <p>

         <li><i>Status : (CA,Bambino) --&gt; Integer</i><br>
              precondizione e postcondizioni per <i>Status(c,b) = n</i><br>
              <u>pre</u>: nessuna <br>
              <u>post</u>: <i>n=1</i> se
              <i>b</i> &egrave; iscritto a <i>c</i>; <i>n=0</i> se <i>b</i> ha
              rinunciato all'iscrizione; <i>n=-1</i> altrimenti <p>

       <dt><b><u>FineTipoAstratto</u></b></dt>
</dl>

Scrivere una classe C++ <code>ClasseAsilo</code> (file <code>.h</code> e file
<code>.cpp</code>) che realizza il tipo astratto <i>ClasseAsilo</i> in modo che
tutte le operazioni del tipo astratto, escluso <i>Crea</i>, siano realizzate in
tempo costante (<i>O(1)</i>) nel caso atteso.  Si consideri che per riferirsi
ai tipi astratti <i>Maestro</i> e <i>Bambino</i> &egrave; necessario utilizzare
le classi <code>Maestra</code> e <code>Bambino</code> gi&agrave; realizzate
delle quali per&ograve; non &egrave; nota la definizione.


<p><b>Problema 2</b>&nbsp;&nbsp; Si modifichi la definizione della classe
<code>ClasseAsilo</code> realizzata per il Problema 1 aggiungendo la funzione
<code>BambiniIscrittiRinunciatari</code> alla classe la cui specifica
&egrave;: <ul>
  <li><i>BambiniIscrittiRinunciatari :
       (CA) --&gt; Enumerazione(Bambino)</i><br>
       precondizione e postcondizioni per
       <i>BambiniIscrittiRinunciatari(c) = e</i><br>
       <u>pre</u>: nessuna <br>
       <u>post</u>: <i>e</i> &egrave; una enumerazione dei
        bambini iscritti alla
       classe <i>c</i> o rinunciatari;
       l'ordine della enumerazione &egrave; qualsiasi<p>
</ul>


Definire una opportuna classe <code>Iteratore</code> che realizza il tipo
astratto <i>Enumerazione(Bambino)</i>, in modo che la funzione
<code>BambiniIscrittiRinunciatari</code> sia eseguita in tempo costante
(<i>O(1)</i>).

</body>
</html>
