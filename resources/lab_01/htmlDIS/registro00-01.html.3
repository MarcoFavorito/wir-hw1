<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <title>
   Corso di Informatica Grafica, Ingegneria Ambiente e Territorio,
   Universit&agrave; di Roma "La Sapienza", registro delle lezioni
</title>
</head>
</head>
<body>
<center>
<hr>
<tt>http://www.dis.uniroma1.it/~degiacomo/didattica/informatica_grafica/registro00-01.html</tt>
<hr>
</center>


<center>
<h2>
Corso di Laurea in Ingegneria dell'Ambiente e del Territorio"<br>
Universit&agrave; di Roma "La Sapienza"
</h2>
</center>

<center>
<font color="#C70000">
<h1>Registro delle lezioni del corso di Informatica Grafica</h1>
</font>
</center>

<center>
<h3>
<a href="http://www.dis.uniroma1.it/~degiacomo">Prof. Giuseppe De Giacomo</a></h3></center>


<hr><b>Materiale didattico.</b>
<br><b>[T1]</b> A. Bellini, A. Guidi. <i>Linguaggio C: guida alla programmazione</i> McGraw-Hill, 1999. (Libro di testo.)
<br><b>[T2]</b> <i>Dispense distribuite del docente</i>
<br><b>[T3]</b> D. P. Curtin, K. Foley, K. Sen, C. Morin.  <i>Informatica di
base.</i> McGraw-Hill, 1999. (Testo di alfabetizzazione informatica.)
<p>


<!-- <hr>
<tt>File contenete tutta la directory di Informatica Grafica
(inclusi tutti i programmi fatti a lezione):
<a href="informatica_grafica.tar">informatica_grafica.tar</a>
</tt> -->

<hr>
<center>
<h2>
Lezioni  - tabella riassuntiva</h2></center>

<center><table BORDER WIDTH="90%" >
<caption><!--
  <TR>
  <TD VALIGN=CENTER WIDTH="20%"><I><FONT COLOR="#008000"></FONT></I></TD>
  <TD VALIGN=TOP WIDTH="23%">&nbsp;</TD>
  <TD VALIGN=CENTER WIDTH="23%">&nbsp;</TD>
  <TD VALIGN=CENTER WIDTH="23%"><B><FONT COLOR="#FF0000">ESAME</FONT></B>
  <P><FONT COLOR="#0000FF">XX dicembre</FONT></TD>
  <TD VALIGN=CENTER WIDTH="23%">&nbsp;</TD>
  </TR>
--></caption>

<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
Settimana</font></i></td>

<td VALIGN=TOP WIDTH="10%"><i><font color="#008000">
Argomento</font></i></td>

<td VALIGN=CENTER WIDTH="25%"><i><font color="#008000">
Lunedi</font></i></td>

<td VALIGN=CENTER WIDTH="25%"><i><font color="#008000">
Mercoledi</font></i></td>

<td VALIGN=CENTER WIDTH="25%"><i><font color="#008000">
Venerdi</font></i></td>

<tr> <td VALIGN=CENTER WIDTH="15%"><i><font color="#008000">
<b>1:</b>25-29set</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font
color="#0000FF">Nozioni base</font></td>

<td VALIGN=CENTER WIDTH="23%">Nozioni base<br> <font
color="#FF0000">(<a href="#Lun1">Lez 1,2</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Nozioni base<br>
<font color="#FF0000">(<a href="Mer1">Lez 3,4</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Nozioni base: esercizi<br>
<font color="#FF0000">(<a href="#Ven1">Lez 5,6</a>)</font></td>


<tr> <td VALIGN=CENTER WIDTH="15%"><i><font color="#008000">
<b>2:</b>2-6ott</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Strutture di controllo</font></td>

<td VALIGN=CENTER WIDTH="23%">Istruzione if<br>
<font color="#FF0000">(<a href="#Lun2">Lez 7,8</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%"><center>----</center></td>

<td VALIGN=CENTER WIDTH="23%">Istruzione if: esercizi<br>
<font color="#FF0000">(<a href="#Ven2">Lez 9,10</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>3:</b>9-13ott</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Strutture di
Controllo</font></td>

<td VALIGN=CENTER WIDTH="23%">Cicli definiti: istruzione for<br>
<font color="#FF0000">(<a href="#Lun3">Lez 11,12</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Cicli indefiniti: istruzione while e do<br>
<font color="#FF0000">(<a href="#Mer3">Lez 13,14</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Cicli definiti e indefiniti: esercizi<br>
<font color="#FF0000">(<a href="#Ven3">Lez 15,16</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>4:</b>16-20ott</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Tipi base
</font></td>

<td VALIGN=CENTER WIDTH="23%">Tipi interi e carattere<br>
<font color="#FF0000">(<a href="#Lun4">Lez 17,18</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Tipi reali<br>
<font color="#FF0000">(<a href="#Mer4">Lez 19,20</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Tipi base: esercizi<br>
<font color="#FF0000">(<a href="#Ven4">Lez 21,22</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>5:</b>23-27ott</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Array</font></td>

<td VALIGN=CENTER WIDTH="23%">Array unidimensionali<br>
<font color="#FF0000">(<a href="#Lun5">Lez 23,24</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Array multidimensionali<br>
<font color="#FF0000">(<a href="#Mer5">Lez 25,26</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Array: esercizi<br>
<font color="#FF0000">(<a href="#Ven5">Lez 27,28</a>)</font></td>

<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>6:</b>30ott-3nov</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Puntatori</font></td>

<td VALIGN=CENTER WIDTH="23%">Puntatori<br>
<font color="#FF0000">(<a href="#Lun6">Lez 29,30</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%"><center>----</center><br>
</td>

<td VALIGN=CENTER WIDTH="23%">Allocazione dinamica della memoria<br>
<font color="#FF0000">(<a href="#Ven6">Lez 31,32</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>7:</b>6-10nov</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Funzioni</font></td>

<td VALIGN=CENTER WIDTH="23%">Introduzione alle funzioni<br>
<font color="#FF0000">(<a href="#Lun7">Lez 33,34</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Passaggio di parametri e
                              record di attivazione<br>
<font color="#FF0000">(<a href="#Mer7">Lez 35,36</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Stringhe<br>
<font color="#FF0000">(<a href="#Ven7">Lez 37,38</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>8:</b>13-17nov</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Ricorsione</font></td>

<td VALIGN=CENTER WIDTH="23%">La ricorsione e lo stack<br>
<font color="#FF0000">(<a href="#Lun8">Lez 39,40</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Attraversamento della palude (un esercizio sulla ricorsione)<br>
<font color="#FF0000">(<a href="#Mer8">Lez 41,42</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Esercitazione sul debugger<br>
<font color="#FF0000">(<a href="#Ven8">Lez 43,44</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>9:</b>20-24nov</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">File</font></td>


<td VALIGN=CENTER WIDTH="23%">File in C<br>
<font color="#FF0000">(<a href="#Lun9">Lez 45,46</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">struct in C<br>
<font color="#FF0000">(<a href="#Mer9">Lez 47,48</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Esempio di prova d'esame<br>
<font color="#FF0000">(<a href="#Ven9">Lez 49,50</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>10:</b>27nov-1dic</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Grafica</font></td>


<td VALIGN=CENTER WIDTH="23%">Discussione esercizio d'esame<br>
<font color="#FF0000">(<a href="#Lun10">Lez 51,52</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Trasformazioni geometriche<br>
<font color="#FF0000">(<a href="#Mer10">Lez 53,54</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Visualizzazione di punti sullo schermo<br>
<font color="#FF0000">(<a href="#Ven10">Lez 55,56</a>)</font></td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>11:</b>4-8dic</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Grafica</font></td>


<td VALIGN=CENTER WIDTH="23%">Esercizi d'esame<br>
<font color="#FF0000">(<a href="#Lun11">Lez 57,58</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Esercizi d'esame<br>
<font color="#FF0000">(<a href="#Mer11">Lez 59,60</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%"><center>----</center><br>
</td>


<tr><td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>12:</b>11-15dic</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Esercizi d'esame</font></td>


<td VALIGN=CENTER WIDTH="23%">Esercizi d'esame<br>
<font color="#FF0000">(<a href="#Lun12">Lez 61,62</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Esercizi d'esame<br>
<font color="#FF0000">(<a href="#Mer12">Lez 63,64</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">Preappello<br>
<font color="#FF0000">(<a href="#Ven12">Lez 65,66</a>)</font></td>


</tr>

</table></center>

<p>
<hr>
<center>
<h2>
Lezioni - dettaglio</h2></center>

<hr>
<ul>
  <li><b>Lezione 1,2 - 25/9/00</b> <a NAME="Lun1"></a>
       <ul>
         <li><b>Argomenti trattati</b> [(T3, Nozione d'algoritmo)]
              <ul>
                <li>Presentazione del corso
                <li>Soluzione di problemi
                <li>Il concetto di algoritmo
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:
              <ul>
                <li>Struttura del corso
                <li>Pagina Web del corso
                <li>Materiale didattico che si utilizza nel corso
              </ul>
         <li> <b> Esercizi proposti</b>
              <ul>
                <li> Visitare il sito web del corso
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 3,4 - 27/9/00</b>
       <ul>
         <li> <b> Argomenti trattati</b>  [T1, Cap. 1.1, 1.2 e 1.4]
              <ul>
                <li> Nozione di algoritmo
                <li> Propriet&agrave; fondamentali degli algoritmi
                     <ul>
                       <li>non-ambiguit&agrave;
                       <li>eseguibilit&agrave;
                       <li>finitezza
                     </ul>
                <li> Primi programmi C
                     (<a href="00-09-27/trecasette.c">trecasette.c</a>,
                     <a href="00-09-27/moltiplicazione0.c">moltiplicazione0.c</a>,
                     <a href="00-09-27/moltiplicazione0.c">moltiplicazione1.c</a>)
                <li> Nozione di variabile, propriet&agrave; caratteristiche:
                     <ul>
                       <li> Nome (o "Identificatore")
                       <li> Tipo
                       <li> Indirizzo
                       <li> Valore
                            (l'unica propriet&agrave; che pu&ograve;
                            cambiare durante l'esecuzione del programma)
                     </ul>
                <li> Istuzioni di stampa: <code>printf()</code>
                <li> Istruzioni di lettura: <code>scanf()</code>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:
              <ul>
                <li> Conoscere le propriet&agrave; fondamentali degli algoritmi
                <li> Avere ben compreso la nozione di variabile
                <li> Conoscere le istruzioni di stampa e lettura per gli interi
              </ul>
         <li> <b> Esercizi proposti</b>
              <ul>
                <li> Scrivere un programma C per stampare:<br>
                     <code>
                     <pre>
                     Tre
                      casette
                       dai
                        tetti
                          aguzzi
                     </pre>
                     </code>
                     (<a href="00-09-27/es_trecasette.c">Soluzione</a>)
              </ul>
       </ul>
</ul>



<hr>
<ul>
  <li><b>Lezioni 5,6 - 29/9/00</b>  (in laboratorio) <a NAME="Ven1"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T3, cenni cap 3.6, 3.10, 3.12,
                                        12.1, 12.2, 12.3, 12.6]
              <ul>
                <li> Nozioni sull'architettura di un calcolatore
                     <ul>
                       <li> Processore
                            (unit&agrave; logico aritmetica,
                            unit&agrave; di controllo)
                       <li> Memoria centrale (ram, rom)
                       <li> Memoria di massa (harddisk, floppy, cd-rom, ...)
                       <li> Dispositivi di ingresso (tastiera, mouse, ...)
                       <li> Dispositivi di uscita (monitor, stampante, ...)
                     </ul>
                <li> Organizzazione della memoria centrale
                <li> La compilazione
                     <ul>
                       <li> linguaggio macchina
                       <li> linguaggio ad alto livello
                       <li> compilazione: traduzione
                            da linguaggio alto livello a linguaggio macchina
                     </ul>
                <li> Compilare un programma C usando il compilatore TurboC/C++:
                     <a href="00-09-29/esercitazione1.zip">esercitazione autoguidata</a> (documento msword compresso)
              </ul>
       </ul>

  <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
       <ul>
         <li> Le nozioni basilari sull'architettura del calcolatore e
              sulla compilazione
         <li> Saper compilare un semplice programma C in TurboC/C++
       </ul>

</ul>

<hr>
<ul><a NAME="Lun2"></a>
  <li><b>Lezioni 7,8 - 2/10/00</b></li>

       <ul>
         <li><b>Argomenti trattati</b>  [T1, Cap. 2.1, 2.2, 2.3, 2.4]
              <ul>
                <li> Operatori aritmetici [<tt>-(unario), *, /, %, +, -</tt>]
                     (<a href="00-10-02/divisione.c">divisione.c</a>)
                <li> Operatore di assegnazione
                <li> Istruzione semplice (<i>espressione</i><tt>;</tt>)
                <li> Istruzione if
                     (<a href="00-10-02/minore100.c">minore100.c</a>)
                <li> Operatori relazionali
                     [<tt>&lt; , &gt;, &lt;=, &gt;=, ==, != </tt>]
                <li> Blocco istruzioni
                     (<a href="00-10-02/meseanno.c">meseanno.c</a>)
                <li> Operatori logici [<tt>!, &&, ||</tt>]
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li>Il comportamento dell'assegnazione
                <li>Come formare istruzioni semplici, istruzioni if,
                     blocco istruzioni
              </ul>
         <li> <b> Esercizi proposti</b>
              <ul>
                <li> Problema: dati tre interi positivi che rappresentano le
lunghezze dei tre lati di un triangolo, determinare se il triangolo &egrave;:
equilatero (tre lati uguali), isoscele (due lati uguali), scaleno (tutti i lati
diviersi).
                     <ul>
                       <li> Progettare un algoritmo (in linguaggio naturale)
per risolvere il problema
                       <li> Scrivere un programma C che realizzi l'algoritmo
                     </ul>
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 9,10 - 6/10/00</b>
       (in laboratorio, tenuta dal Prof. Calvanese) <a NAME="Ven2"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, Cap. 2.1, 2.2, 2.3, 2.4]
              <ul>
                <li> Esercizi sull'instruzione if
                     <ul>
                       <li> Triangolo - variante con if annidati
                            (<a href="00-10-06/triang.c">triang.c</a>)
                       <li> Triangolo - variante con condizioni complesse
                            (<a href="00-10-06/triangol3.c">triang3.c</a>)
                       <li> Temperatura - variante con condizioni complesse
                            (<a href="00-10-06/temperat.c">temperat.c</a>)
                     </ul>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Saper utilizzare l'istruzioni if
                <li> Saper compilare programmi C con istruzioni if in TurboC/C++
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Triangolo - variante con senza if annidati
                     (<a href="00-10-06/triang2.c">triang2.c</a>)
                <li> Calcolo della data successiva
                     (<a href="00-10-06/datasucc.c">datasucc.c</a>)
              </ul>
       </ul>
</ul>



<hr>
<ul>
  <li><b>Lezioni 11,12 - 9/10/00</b> <a NAME="Lun3"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, Cap. 3.1, 3.2]
              <ul>
                <li> L'istruzione <tt>for</tt>
                e  <i>cicli definiti</i>
                     (i.e., con numero di ripetizioni fissato
                     prima di entrare nel ciclo)
                <li> Variabile <i>indice del ciclo</i>
                     (i.e., che conta il numero di ripetizioni)
                <li> Incrementi e decrementi
                <li> Esempi:
                     <ul>
                       <li> Somma di 100 interi letti da input
                            (<a href="00-10-09/somma.c">somma.c</a>)
                       <li> Massimo tra 100 interi non negativi letti da input
                            (<a href="00-10-09/massimo.c">massimo.c</a>)
                     </ul>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Avere compreso la nozione di ciclo definito
                <li> Saper utilizzare l'istruzioni for
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Stampa dei primi 50 numeri pari;
                     stampa dei primi n numeri pari, con n letto da input
                     (<a href="00-10-09/pari.c">pari.c</a>)
                <li> Leggere due interi m ed n da input
                     e stampare tutti i numeri pari inclusi tra m ed n
                     (<a href="00-10-09/pari2.c">pari2.c</a>)
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 13,14 - 11/10/00</b> <a NAME="Mer3"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, Cap. 3.4, 3.5, 3.7, 1.3, 1.4]
              <ul>
                <li><i>cicli indefiniti</i>
                     (i.e., con numero di ripetizioni che dipende da
                     ci&ograve; che avviene durante le iterazioni del ciclo)
                <li> L'istruzione <tt>while</tt>
                     <ul>
                       <li> Somma di una sequenza di interi terminata da 0
                            (<a href="00-10-11/sommaN.c">sommaN.c</a>)
                       <li> Lunghezza di una sequenza di interi terminata da 0
                            (<a href="00-10-11/lung1.c">lung1.c</a>)
                     </ul>
                <li> Relazione tra <tt>for</tt> e <tt>while</tt> in C
                <li> L'istruzione <tt>do-while</tt>
                     <ul>
                       <li> Lunghezza di una sequenza di interi terminata da 0
                            - versione che usa l'istruzione <tt>do-while</tt>
                            (<a href="00-10-11/lung2.c">lung2.c</a>)
                     </ul>
                <li> Relazione tra <tt>do-while</tt> e <tt>while</tt>
                <li> Cicli annidati
                     <ul>
                       <li> Stampare la tavola pitagorica - senza intestazione
                            (<a href="00-10-11/pitagor1.c">pitagor1.c</a>)
                     </ul>
                <li> Definire costanti attraverso la direttiva <tt>#define</tt>
                     (es: <tt>#define NMAX 10</tt>)
                <li> Output formattato
                     (es: "%4d", intero decimale di 4 spazi allineato a destra;
                      "%-4d" intero decimale di 4 spazi allineato a sinistra; )
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Avere compreso la nozione di ciclo indefinito
                <li> Saper utilizzare l'istruzioni <tt>while</tt>,
                     <tt>do-while</tt>
                <li> Conoscere le relazioni tra <tt>for</tt>, <tt>while</tt>
                     e <tt>do-while</tt>
                <li> Avere compreso la distinzione tra variabile e costante
                     definita tramite la direttiva <tt>#define</tt>
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Stampare la tavola pitagorica con intestazione
                     <a href="00-10-11/pitagor2.txt">pitagor2.txt</a>
                     (<a href="00-10-11/pitagor2.c">pitagor2.c</a>)
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 15,16 - 13/10/00</b> (in laboratorio) <a NAME="Ven3"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 11.1, 11.2, 11.3, 2.5, 2.6]
              <ul>
                <li>Esercizi su cicli definiti, indefiniti
                <li> <a href="00-10-13/cosasifa.txt">cosasifa.txt</a>
                <li> <a href="00-10-13">soluzioni</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Saper scrivere programmi che fanno uso di istruzioni
                     <tt>for</tt>, <tt>while</tt>, <tt>do-while</tt>
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in laboratorio
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 17,18 - 16/10/00</b> <a NAME="Lun4"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> <i>Tipi astratti</i> (o matematici) di dato:
                     <ul>
                       <li>Dominio dei valori del tipo
                       <li>Operazioni ammesse
                       <li>Costanti che denotano valor del tipo
                     </ul>
                <li> Realizzazione dei tipi astratti nei
                     linguaggi di programmazione (<i>tipi concreti</i>)
                     <ul>
                       <li>Intervallo di definizione
                            (<tt>sizeof</tt> e <tt>limits.h</tt>)
                       <li>Operazioni definite
                       <li>Rappresentazione delle costanti
                       <li>Funzionalit&agrave; di ingresso/uscita
                     </ul>
                <li> Tipi base del C: <i>interi</i>, <i>caratteri</i>,
                     <i>reali</i>
                     <ul>
                       <li> <tt>int</tt>, <tt>short</tt>, <tt>long</tt>
                            e varianti <tt>unsigned</tt>
                            (<a href="00-10-16/intlimits.c">intlimits.c</a>,
                            <a href="00-10-16/unsignedlimits.c">unsignedlimits.c</a>)

                       <li> <tt>char</tt>
                           (<a href="00-10-16/charlimits.c">charlimits.c</a>)
                     </ul>
                <li> Istruzione <tt>switch</tt>
                     (<a href="00-10-16/operazioni1.c">operazioni1.c
                     con istruzione if</a>,
                     <a href="00-10-16/operazioni2.c">operazioni2.c
                     con istruzione switch</a>)
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Conoscere la distinzione tra tipi astratti e lore realizzazione in un linguaggio di programmazione.
                <li> Quali sono i tipi base del C
                <li> I tipi <tt>int</tt>, <tt>short</tt>, <tt>long</tt>
                <li> Il tipo <tt>char</tt>
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 19,20 - 18/10/00</b> <a NAME="Mer4"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 3.9, 3.10, 11.5]
              <ul>
                <li> Rappresentazione dei reali (<i>floating point</i>):
                     <ul>
                       <li>segno
                       <li>mantissa
                       <li>esponente
                     </ul>
                <li> Reali in C:
                     <tt>float</tt>,
                     <tt>double</tt>,
                     <tt>long double</tt>
                     <ul>
                       <li>Intervallo di definizione, <tt>sizeof</tt> e
                            <tt>float.h</tt>
                            (<a href="00-10-18/floatlimits.c">floatlimits.c</a>)
                       <li>Operazioni definite
                            (come per interi eccetto <tt>%</tt>)
                       <li>Rappresentazione delle costanti
                       <li>Funzionalit&agrave; di ingresso/uscita
                            (<a href="00-10-18/floatio.c">floatio.c</a>)
                     </ul>
                <li> Funzioni predefinite sui reali in <tt>math.h</tt>
                <li> Conversioni sicure (e non sicure) tra tipi base del C
                     (<a href="00-10-18/TipiPrimitivi.c">TipiPrimitivi.c</a>)
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Conoscere la rappresentazione dei reali
                <li> I tipi <tt>float</tt>, <tt>double</tt>,
                     <tt>long double</tt>
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 21,22 - 20/10/00</b> (in laboratorio) <a NAME="Ven4"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li>Esercizi sui reali e sui caratteri
                <li> <a href="00-10-20/cosasifa.txt">cosasifa.txt</a>
                <li> <a href="00-10-20">soluzioni</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Saper scrivere programmi che fanno uso di reali e
                     caratteri
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in laboratorio
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 23,24 - 23/10/00</b> <a NAME="Lun5"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 4.1, 4.2, 4.3]
              <ul>
                <li> Array (monodimensionali): tipo strutturato composto da
                     <i>N</i> <i>elementi</i> omogenei (dello stesso tipo),
                     tali elementi sono individuabili tramite un
                     <i>indice</i> (indice dell'array);
                     il numero di elementi &egrave; detto <i>lunghezza</i> o
                     <i>dimensione</i> dell'array
                <li> Array in C
                     <ul>
                       <li> dichiarazione
                       <li> indice [0..N-1]
                       <li> selezione i-esima componente
                       <li> uso del <tt>for</tt> sull'indice per scandire
                            l'array
                       <li> inizializzazione di array
                     </ul>
                <li> Esempio:
                     <a href="00-10-23/esperimento.c">esperimento.c</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere cosa sono gli array
                <li> Saper usare array (statici) C monodimensionali
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Esercizio: Leggere una sequenza di caratteri terminata da
                     <return> ('\n') e stampare le frequenze dei caratteri
                     '0','1',...,'9' (quante volte appaiono nella sequenza).
                     (<a href="00-10-23/frequenze.c">soluzione</a>)
                <li> Esercizio: Leggere un vettore di int e restituire l'indice
                     dell'elemento massimo
                     (<a href="00-10-23/vettMax.c">soluzione</a>)
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 25,26 - 25/10/00</b> <a NAME="Mer5"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 4.4, 4.5]
              <ul>
                <li> Matrici (array multidimensionali): tipo strutturato
                     composto da
                     <i>MxN</i> (anche <i>N_1x..xN_m</i>) <i>elementi</i>
                     omogenei (dello stesso tipo),
                     tali elementi sono individuabili tramite
                     <i>indici</i> (indici della matrice);
                <li> Matrici (array multidimensionali) in C
                     <ul>
                       <li> dichiarazione
                       <li> indice [0..M][0..N] (anche [0..N-1]..[0..N_m-1])
                       <li> selezione (i,j)-esima componente
                       <li> uso di <tt>for</tt> sugli indici per scandire
                            la matrice
                       <li> inizializzazione della matrice
                     </ul>
                <li> Esempi:
                     <ul>
                       <li>Lettura e stampa di matrici
                            (<a href="00-10-25/matrici.c">matrici.c</a>)
                       <li>Somma di matrici
                         (<a href="00-10-25/matriciSomma.c">matriciSomma.c</a>)
                       <li>Prodotto di matrici
                            (<a href="00-10-25/matriciProdotto.c">matriciProdotto.c</a>)
                       <li>Indici elemento max
                            (<a href="00-10-25/matriciMax.c">matriciMax.c</a>)
                            <li> Verifica matrice quadrata diagonale
                                 (<a href="00-10-25/matriciDiag.c">matriciDiag.c</a>)
                          </ul>

              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere cosa sono le matrici (array multidimensionali)
                <li> Saper usare array (statici) C multidimensionali
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Esercizio: Leggere una matrice MxM di reali e verificare che sia una matrice simmetrica (mat[i][j]==mat[j][i]).
                     (<a href="00-10-25/matriciSimmetriche.c">soluzione</a>)
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 27,28 - 27/10/00</b> (in laboratorio) <a NAME="Ven5"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li>Esercizi sui vettori e matrici
                <li> <a href="00-10-27/cosasifa.txt">cosasifa.txt</a>
                <li> <a href="00-10-27">soluzioni</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Saper scrivere programmi che fanno uso di array
                     unidimensionali e multidimensionali
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in laboratorio
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 29,30 - 30/10/00</b> <a NAME="Lun6"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 9.1, 9.2, 9.3]
              <ul>
                <li> Indirizzo di variabili, operatore "indirizzo" (<tt>&</tt>)
                <li> Puntatori (variabili che contengono indirizzi):
                     <ul>
                       <li>Dichiarazione di puntatori
                       <li>Inizializzazione di puntatori
                       <li>Operatore di dereferenziamanto
                       <li>sizeof per i puntatori
                       <li>Stampa di puntatori (si usa il formattatore "%p")
                       <li>Un esempio:
                       <a href="00-10-30/scambiovar.c">scambiovar.c</a>
                     </ul>
                <li> Aritmetica dei puntatori C
                     (operatori aritmetici ammessi: <tt>+,-</tt>)
                     -- <a href="00-10-30/puntatori.c">puntatori.c</a>
                <li> Relazione tra array e puntatori in C
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere cosa sono i puntatori
                <li> Avere compreso la relazione tra array e puntatori in C
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 31,32 - 03/11/00</b> (in laboratorio) <a NAME="Ven6"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 9.5]
              <ul>
                <li> Allocazione dinamica della memoria
                <li> L'area di memoria dinamica: Heap
                <li>Tempo di vita di un oggetto allocato dinamicamente
                <li> Gestione della memoria dinamica in C:
                     <ul>
                       <li>La libreria <tt>&lt;stdlib.h&gt;</tt>
                       <li>la funzione di allocazione:
                            <tt>void* malloc(int)</tt>
                       <li>La funzione di deallocazione:
                            <tt>void free(void*)</tt>
                       <li>Un esempio commentato:
                            <a href="00-11-03/puntator.c">puntator.c</a>
                     </ul>
                <li> Vettori dinamici in C
                     <a href="00-11-03/vettoredinamico.c">vettoredinamico.c</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere cosa &egrave; la memoria dinamica
                <li> L'allocazione e la deallocazione di oggetti dinamici in C
                <li> L'utilizzo di vettori dinamici in C
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 33,34 - 06/11/00</b> <a NAME="Lun7"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 7.1, 7.2, 7.3, 7.4, 7.5]
              <ul>
                <li> Modularizzazione di un programma (cenni)
                <li> Astrazione funzionale:
                     concentrarsi sul "cosa" e non sul "come"
                <li> Funzioni in C
                     <ul>
                       <li>Chiamata (o attivazione, invocazione) di funzione
                            (<a href="00-11-06/figure1.c">figure1.c</a>)
                       <li>Definizione di funzioni:
                            intestazione della funzione e corpo della funzione
                            (<a href="00-11-06/figure1.c">figure1.c</a>)
                       <li>Variabili locali ad una funzione:
                            campo di azione -scope- (nozione statica)
                            e tempo di vita (nozione dinamica)
                            (<a href="00-11-06/figure2.c">figure2.c</a>)
                       <li>Parametri formali (specie di variabili locali),
                            parametri attuali, passaggio di parametri per
                            valore:
                            il valore dell'espressioni che costituiscono
                            i parametri attuali viene utilizzato per
                            inizializzare i parametri formali.
                            (<a href="00-11-06/figure3.c">figure3.c</a>,
                            <a href="00-11-06/figure4.c">figure4.c</a>)
                     </ul>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere cosa &egrave; l'astrazione funzionale
                <li> Sapere definire ed usare semplici funzioni C
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Leggere un intero n &gt; 0, allocare una matrice quadrata
                     dinamica nXn, inizializzare i suoi elementi a 0,
                     stamparla, e deallocarla.
                     (<a href="00-11-06/matricidinamiche.c">soluzione</a>).
                <li> Modificare il programma
                     <a href="00-11-06/figure4.c">figure4.c</a>
                     in modo da utilizzare nella stampa caratteri della figura
                     caratteri scelti dall'utente
                     (<a href="00-11-06/figure5.c">soluzione</a>).
                <li> Modificare il programma
                     <a href="00-11-06/figure4.c">figure4.c</a>
                     in modo da stampare le figure con un offset dall'inizio
                     della riga scelto dall'utente
                     (<a href="00-11-06/figure5.c">soluzione</a>).
                <li> Tutti quelli che non si riesce a finire in laboratorio
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 35,36 - 08/11/00</b> <a NAME="Mer7"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 7.6, 7.8, 7.9, 7.10, 9.4, 9.7]
              <ul>
                <li> Funzioni che restistuiscono un risultato
                <li> L'istruzione <tt>return</tt> <i>espressione</i><tt>;</tt>
                <li> Passaggio di parametri per indirizzo -o per puntatore-
                     (<a href="00-11-08/scambia.c">scambia.c</a>)
                <li> Passaggio di array come parametri:
                     <ul>
                       <li> <tt>int fun(int* array, int dim)</tt>. questo e' il
                            modo piu' generale per passare array
                            (sia statici che dinamici).
                            In alternativa si pu&ograve; usare
                            <tt>int fun(int array[], int dim)</tt> -il
                            compilatore traduce automaticamente
                            questa intestazione in <tt>int fun(int*
                            array, int dim)</tt>.
                       <li> <tt>int fun(int array[DIM])</tt> dove <tt>DIM</tt>
                            &egrave; una costante. Questo modo va bene
                            solo per array statici.
                     </ul>
                <li> Passaggio di matrici come parametri:
                     <ul>
                       <li> <tt>int fun(int mat[M][N])</tt> con <tt>M</tt>
                       ed <tt>N</tt> costanti. Questo modo va bene
                            solo per matrici statiche.
                       <li> <tt>int fun(int**, int m, int n)</tt> dove
                            <tt>m</tt> e <tt>n</tt> rappresentano
                            il numero di righe e di conlonne della
                            matrice.  Questo modo va bene
                            solo per matrici dinamiche.
                     </ul>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Come realizzare funzioni che restituiscono un valore.
                <li> Come passare variabili per indirizzo a funzioni C.
                <li> Come passare vettori e matrici a funzioni C.
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Leggere da tastiera un carattere fra
                     'I','V','X','L','C','D','M' che
                     rappresenta una "cifra" di un numero romano
                     e stampare il numero intero corrispondente
                     (<a href="00-11-08/romani1.c">romani1.c</a>).
                <li> Leggere da tastiera una sequenza di caratteri fra
                     'I','V','X','L','C','D','M' (che rappresenta un numero
                     romano) terminata da '\n',
                     e stampare il numero intero corrispondente.
                     Assumere che le cifre romane compaiano SOLO in ordine
                     decrescente (come ad esempio in
                     MMCXXLII) ma non ammettere che vi sia una
                     sottosequenza crescente (come ad
                     esempio la sottosequenza CM in MCMX)
                     (<a href="00-11-08/romani2.c">romani2.c</a>).
                <li> Come punto precedente,
                     ma assumere solo che la sequenza di
                     caratteri rappresenti un numero romano corretto.
                     In particolare, ammettere che via sia una sottosequenza di
                     due "cifre" in ordine crescente (come ad esempio la
                     sottosequenza CM in MCMX)
                     (<a href="00-11-08/romani3.c">romani3.c</a>).
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 37,38 - 10/11/00</b>
       (in laboratorio, tenuta dall'Ing. Iannola) <a NAME="Ven7"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 6, 9.4]
              <ul>
                <li> Stringhe in C
                     (<a href="00-11-10/stringhe.c">stringhe.c</a>)
                <li> La libreria <tt>&ltstring.h&gt</tt>
                <li> <a href="00-11-10/iannola/">Esercizi sulle stringhe</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere manipolare stringhe in C
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in laboratorio
              </ul>
       </ul>
</ul>



<hr>
<ul>
  <li><b>Lezioni 39,40 - 13/11/00</b>
        <a NAME="Lun8"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 10.1]
              <ul>
                <li> Stack di sistema e
                     record di attivazione delle funzioni
                     (<a href="00-11-13/stack.c">stack.c</a>)
                <li> Funzioni ricorsive
                     (<a href="00-11-13/ricorsio.c">ricorsio.c</a>
                <li> Esempi di funzioni ricorsive:
                     <ul>
                       <li>Fattoriale
                            (<a href="00-11-13/fattoriale.c">fattoriale.c</a>)
                     </ul>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Cosa sono i record di attivazione delle funzioni
                     e come sono gestiti nello stack di sistema
                <li> Cosa sono le funzioni ricorsive
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Realizzare in C le funzioni ricorsive:
                     <ul>
                       <li>Fibonacci
                            (<a href="00-11-13/fibonacci.c">fibonacci.c</a>)
                       <li>Ackermann
                            (<a href="00-11-13/ackermann.c">ackermann.c</a>)

                     </ul>
                <li> Simulare l'andamento dello stack su
                     Fattoriale, Fibonacci e Ackermann.
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 41,42 - 15/11/00</b>
        <a NAME="Mer8"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> Progettazione di funzioni ricorsive
                (<a href="00-11-15/schemaricorsione.txt">schemaricorsione</a>)

                <li> Esercizio sulla ricorsione: Attraversamento della Palude
                     (<a href="00-11-15/palude.txt">testo</a>,
                     <a href="00-11-15/palude.c">soluzione</a>).
              </ul>

         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Come progettare funzioni ricorsive.
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Completare la realizzazione in C dell esercizio:
                     Attraversamento della Palude.
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 43,44 - 17/11/00</b>
       (in laboratorio, tenuta dall'Ing. Iannola) <a NAME="Ven8"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T2:
              <a href="turboC.html">Dispensa sul TurboC</a>]
              <ul>
                <li> Debugging di programmi
                <li> Uso del Debugger del TurboC
                <li> <a href="00-11-17/iannola/">Esercizi proposti</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere utilizzare il dubugger del TurboC
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in laboratorio
              </ul>
       </ul>
</ul>



<hr>
<ul>
  <li><b>Lezioni 45,46 - 20/11/00</b>
        <a NAME="Lun9"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 13.1, 13.4, 13.6]
              <ul>
                <li> Introduzione ai file (dati su memoria secondaria)
                <li> File in C (solo file sequenziali)
                     <ul>
                       <li> Il filepointer: <tt>FILE* fp</tt>
                       <li> Apertura di un file: <tt>fopen()</tt>
                       <li> Chiusura di un file: <tt>fclose()</tt>
                       <li> Lettura dati da un file: <tt>fscanf()</tt>
                       <li> Scrittura dati su un file: <tt>fprint()</tt>
                       <li> Verifica di fine file: <tt>feof()</tt>
                       <li> Altre funzioni: <tt>remove()</tt>, <tt>rename()</tt>
                     </ul>
                <li><a href="00-11-20">Esercizi su file</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Cosa sono i file
                <li> Come usare file sequenziali in C
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Vedi sopra
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 47,48 - 22/11/00</b>
        <a NAME="Mer9"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T1, 12.1, 12.2]
              <ul>
                <li> Record: aggregati non omogenei
                <li> Record in C: <tt>struct</tt>
              </ul>

         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Cosa sono e come utilizzare le <tt>struct</tt>.
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 49,50 - 24/11/00</b>
       (in laboratorio) <a NAME="Ven9"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> Esempio di prova d'esame
                <li> <a href="00-11-24/testo.html">Testo</a>
                <li> <a href="00-11-24">Soluzione</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere impostare la prova d'esame
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Realizzare tutte le funzioni che non si riesce a finire
                     in laboratorio
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 50,52 - 27/11/00</b>
       <a NAME="Lun10"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> Correzione dell'esempio di prova d'esame
                <li> <a href="00-11-24/testo.html">Testo</a>
                <li> <a href="00-11-24">Soluzione</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere come affrontare la prova d'esame
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Realizzare tutte le funzioni che non discusse in classe
              </ul>
       </ul>
</ul>



<hr>
<ul>
  <li><b>Lezioni 53,54 - 29/11/00</b>
       <a NAME="Mer10"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T2,
                     <a href="geom_sn.pdf">testo</a> (solo capitolo 1),
                     <a href="geom_sls.pdf">slides</a>]

              <ul>
                <li> Informatica Grafica
                <li> La nozione di figura 2D e di punto
                <li> Le trasformazioni geometriche:
                     <i>traslazione</i>,
                     <i>scalamento</i> (e <i>riflessione</i>),
                     <i>Rotazione</i>
                <li> Rappresentazione matriciale in coordinate omogenee
                <li> Combinazione delle trasformazioni
                <li> Trasformazione degli assi cartesiani
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere cosa sono le trasformazioni geometriche
                     e saperle utilizzare.
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 55,56 - 1/12/00</b>
       (in laboratorio)  <a NAME="Ven10"></a>
       <ul>
         <li><b>Argomenti trattati</b> [T2,
                     <a href="geom_sn.pdf">testo</a> (solo capitolo 1),
                     <a href="geom_sls.pdf">slides</a>]

              <ul>
                <li> Informatica Grafica
                <li> Visualizzazione di oggetti 2D sullo schermo
                <li> Alcune primitive grafiche del TurboC
                     (<a href="00-12-01/GraficaTC.txt">note</a>)
                <li> Visualizzazione di oggetti 2D in TurboC
                <li> Esempio:
                     (<a href="00-12-01/graf_tc.c">graf_tc.c</a>)
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Sapere come visualizzare oggetti 2D utilizzando la
                     libreria <tt>graphics.h</tt> del TurboC
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in laboratorio
              </ul>
       </ul>
</ul>


<hr>
<ul>
  <li><b>Lezioni 57,58 - 4/12/00</b>
       (tenuta dall'Ing. Iannola)  <a NAME="Lun11"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> <a href="00-12-04">Correzione
                     esercizio di Informatica Grafica</a>
                <li> <a href="EserciziEsame">Esercizio d'esame</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Affrontare esercizi d'esame
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in classe
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 59,60 - 6/12/00</b>
       <a NAME="Mer11"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> <a href="EserciziEsame">Esercizio d'esame</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Affrontare esercizi d'esame
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in classe
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 61,62 - 11/12/00</b>
       <a NAME="Lun12"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> <a href="EserciziEsame">Esercizio d'esame</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Affrontare esercizi d'esame
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in classe
              </ul>
       </ul>
</ul>

<hr>
<ul>
  <li><b>Lezioni 63,64 - 13/12/00</b>
       <a NAME="Mer12"></a>
       <ul>
         <li><b>Argomenti trattati</b>
              <ul>
                <li> <a href="EserciziEsame">Esercizio d'esame</a>
              </ul>
         <li><b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>
              <ul>
                <li> Affrontare esercizi d'esame
              </ul>
         <li><b>Esercizi proposti</b>:</li>
              <ul>
                <li> Tutti quelli che non si riesce a finire in classe
              </ul>
       </ul>
</ul>


<hr><font size=-1>Home page del <a href="index.html">Corso di Informatica
Grafica</a></font> <br>
<font size=-1> Corso di Laurea in Ingegneria
dell'Ambienete e del Territorio, Universit&agrave; di Roma "La Sapienza"
</font>
<hr>
</body>
</html>
