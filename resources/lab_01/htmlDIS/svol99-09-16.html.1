<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<!-- Created by htmlize-0.49 in css mode. -->
<html>
  <head>
    <title>svol99-09-16.c</title>
    <style type="text/css">
    <!--
      BODY {
        color: #000000;
        background-color: #ffffff;
      } /* default */
      span.constant {
        color: #9400d3;
      } /* font-lock-constant-face */
      span.keyword {
        color: #006400;
      } /* font-lock-keyword-face */
      span.function-name {
        color: #0000cd;
      } /* font-lock-function-name-face */
      span.comment {
        color: #4682b4;
      } /* font-lock-comment-face */
      span.string {
        color: #b22222;
      } /* font-lock-string-face */
      span.variable-name {
        color: #a52a2a;
      } /* font-lock-variable-name-face */
      span.type {
        color: #ff00ff;
      } /* font-lock-type-face */
      span.builtin {
        color: #da70d6;
      } /* font-lock-builtin-face */
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="comment">/* 
   Scritto di Fondamenti di Informatica
   Settembre 1999
   Ambiente e Territorio
*/</span>

#<span class="builtin">include</span> <span class="string">&lt;stdio.h&gt;</span>
#<span class="builtin">include</span> <span class="string">&lt;stdlib.h&gt;</span>

#<span class="builtin">define</span> <span class="variable-name">LEN</span> 25

<span class="keyword">typedef</span> <span class="keyword">enum</span> {vero,falso} <span class="type">booleano</span>;

<span class="keyword">typedef</span> <span class="keyword">enum</span> {okey,incoerente,incompleto} <span class="type">attributocodice</span>;

<span class="keyword">struct</span> <span class="type">cella</span> {
	<span class="type">int</span> <span class="variable-name">molt</span>;
	<span class="type">char</span> <span class="variable-name">cod1</span>,<span class="variable-name">cod2</span>,<span class="variable-name">cod3</span>;
};

<span class="keyword">struct</span> <span class="type">lista</span> {
	<span class="type">char</span> <span class="variable-name">car</span>;
	<span class="keyword">struct</span> <span class="type">lista</span> *<span class="variable-name">next</span>;
};


<span class="comment">/* prototipi */</span>
	<span class="type">void</span> <span class="function-name">LeggiNomeFile</span>(<span class="type">char</span> *, <span class="type">char</span> *);
	<span class="type">FILE</span> *<span class="function-name">ApriFile</span>(<span class="type">char</span> *, <span class="type">char</span> *);
	<span class="type">void</span> <span class="function-name">AzzeraTavola</span>(<span class="keyword">struct</span> <span class="type">cella</span> *);
	booleano Incoerente(<span class="keyword">struct</span> <span class="type">cella</span>[], <span class="type">char</span>[]);
	<span class="keyword">struct</span> <span class="type">lista</span> *<span class="function-name">CreaElemento</span>(<span class="type">void</span>);
	<span class="type">void</span> <span class="function-name">InTesta</span>(<span class="type">char</span>, <span class="keyword">struct</span> <span class="type">lista</span> **);
	<span class="type">void</span> <span class="function-name">DistruggiLista</span>(<span class="keyword">struct</span> <span class="type">lista</span> **);
	attributocodice Codifica(<span class="type">char</span> *, <span class="type">char</span> *, <span class="keyword">struct</span> <span class="type">lista</span> **);
	<span class="type">void</span> <span class="function-name">StampaLista</span>(<span class="keyword">struct</span> <span class="type">lista</span> *);
	<span class="type">int</span> <span class="function-name">main</span>(<span class="type">void</span>);


<span class="type">void</span> <span class="function-name">LeggiNomeFile</span>(<span class="type">char</span> *<span class="variable-name">messaggio</span>, <span class="type">char</span> *<span class="variable-name">nome</span>)
{
	printf(<span class="string">&quot;%s&quot;</span>,messaggio);
	gets(nome);
	<span class="keyword">return</span>;
}


<span class="type">FILE</span> *<span class="function-name">ApriFile</span>(<span class="type">char</span> *<span class="variable-name">nome</span>, <span class="type">char</span> *<span class="variable-name">modo</span>)
{
	<span class="type">FILE</span> *<span class="variable-name">f</span>;
	f=fopen(nome,modo);
	<span class="keyword">if</span>(f==NULL) {
		fprintf(stderr,<span class="string">&quot;Errore apertura file %s in modo %s. Esecuzione terminata.\n&quot;</span>,nome,modo);
		exit(1);
	}
	<span class="keyword">return</span> f;
}


<span class="type">void</span> <span class="function-name">AzzeraTavola</span>(<span class="keyword">struct</span> <span class="type">cella</span> *<span class="variable-name">z</span>)
{
	<span class="type">int</span> <span class="variable-name">i</span>;
	
	<span class="keyword">for</span>(i=0;i&lt;26;i++)
		z[i].molt=0;
	<span class="keyword">return</span>;
}


<span class="type">booleano</span> <span class="function-name">Incoerente</span>(<span class="keyword">struct</span> <span class="type">cella</span> <span class="variable-name">x</span>[], <span class="type">char</span> <span class="variable-name">nome</span>[])
{
	<span class="type">FILE</span> *<span class="variable-name">f</span>;
	<span class="type">char</span> <span class="variable-name">lett</span>,<span class="variable-name">a</span>,<span class="variable-name">b</span>,<span class="variable-name">c</span>,<span class="variable-name">newline</span>;
	<span class="type">int</span> <span class="variable-name">i</span>;
	
	AzzeraTavola(x);
	f=ApriFile(nome,<span class="string">&quot;r&quot;</span>);
	fscanf(f,<span class="string">&quot;%c %c%c%c%c&quot;</span>,&amp;lett,&amp;a,&amp;b,&amp;c,&amp;newline);
	<span class="keyword">while</span>(!feof(f)) {
		i=lett-<span class="string">'A'</span>;
		x[i].molt++;
		<span class="keyword">if</span>(x[i].molt&gt;1) {
			fclose(f);
			<span class="keyword">return</span> vero; <span class="comment">/* incoerente */</span>
		}
		x[i].cod1=a;
		x[i].cod2=b;
		x[i].cod3=c;
		fscanf(f,<span class="string">&quot;%c %c%c%c%c&quot;</span>,&amp;lett,&amp;a,&amp;b,&amp;c,&amp;newline);
	}
	fclose(f);
	<span class="keyword">return</span> falso; <span class="comment">/* coerente */</span>
}


<span class="keyword">struct</span> <span class="type">lista</span> *<span class="function-name">CreaElemento</span>(<span class="type">void</span>)
{
	<span class="keyword">struct</span> <span class="type">lista</span> *<span class="variable-name">nuovo</span>;
	nuovo=malloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="type">lista</span>));
	<span class="keyword">if</span>(nuovo==NULL) {
		fprintf(stderr,<span class="string">&quot;Allocazione memoria fallita. Esecuzione terminata.\n&quot;</span>);
		exit(2);
	}
	<span class="keyword">return</span> nuovo;
}


<span class="type">void</span> <span class="function-name">InTesta</span>(<span class="type">char</span> <span class="variable-name">ch</span>, <span class="keyword">struct</span> <span class="type">lista</span> **<span class="variable-name">testa</span>)
{
	<span class="keyword">struct</span> <span class="type">lista</span> *<span class="variable-name">nuovo</span>;
	
	nuovo=CreaElemento();
	nuovo-&gt;car=ch;
	nuovo-&gt;next=*testa;
	*testa=nuovo;
	<span class="keyword">return</span>;
}


<span class="type">void</span> <span class="function-name">DistruggiLista</span>(<span class="keyword">struct</span> <span class="type">lista</span> **<span class="variable-name">testa</span>)
{
	<span class="keyword">struct</span> <span class="type">lista</span> *<span class="variable-name">aux</span>;
	<span class="keyword">while</span>(*testa!=NULL) {
		aux=*testa;
		*testa=(*testa)-&gt;next;
		free(aux);
	}
	<span class="keyword">return</span>;
}

<span class="type">attributocodice</span> <span class="function-name">Codifica</span>(<span class="type">char</span> *<span class="variable-name">cod</span>, <span class="type">char</span> *<span class="variable-name">msg</span>, <span class="keyword">struct</span> <span class="type">lista</span> **<span class="variable-name">testa</span>)
{
	<span class="keyword">struct</span> <span class="type">cella</span> <span class="variable-name">tavola</span>[26];
	<span class="type">FILE</span> *<span class="variable-name">f</span>;
	<span class="type">int</span> <span class="variable-name">ch</span>,<span class="variable-name">i</span>;
	
	*testa=NULL;
	
	<span class="keyword">if</span>(Incoerente(tavola,cod)==vero)
		<span class="keyword">return</span> incoerente;
	f=ApriFile(msg,<span class="string">&quot;r&quot;</span>);
	ch=fgetc(f);
	<span class="keyword">while</span>(!feof(f)) {
		i=ch-<span class="string">'A'</span>;
		<span class="keyword">if</span>(tavola[i].molt==0) {
			fclose(f);
			DistruggiLista(testa);
			<span class="keyword">return</span> incompleto;
		}
		InTesta(tavola[i].cod1,testa);
		InTesta(tavola[i].cod2,testa);
		InTesta(tavola[i].cod3,testa);
		ch=fgetc(f);
	}
	fclose(f);
	<span class="keyword">return</span> okey;
}


<span class="type">void</span> <span class="function-name">StampaLista</span>(<span class="keyword">struct</span> <span class="type">lista</span> *<span class="variable-name">punt</span>)
{
	<span class="keyword">for</span>(;punt!=NULL;punt=punt-&gt;next)
		printf(<span class="string">&quot;%c&quot;</span>,punt-&gt;car);
	printf(<span class="string">&quot;\n&quot;</span>);
	<span class="keyword">return</span>;
}


<span class="function-name">main</span>(<span class="type">void</span>)
{
	<span class="type">char</span> <span class="variable-name">filecod</span>[LEN], <span class="variable-name">filemsg</span>[LEN];
	<span class="keyword">struct</span> <span class="type">lista</span> *<span class="variable-name">primo</span>;
		
	LeggiNomeFile(<span class="string">&quot;Inserisci nome file codice: &quot;</span>,filecod);
	LeggiNomeFile(<span class="string">&quot;Inserisci nome file messaggio: &quot;</span>,filemsg);
	<span class="keyword">switch</span>(Codifica(filecod,filemsg,&amp;primo)) {
		<span class="keyword">case</span> <span class="constant">incompleto</span>: printf(<span class="string">&quot;Codice incompleto. Ciao.\n&quot;</span>);
		                 <span class="keyword">break</span>;
		<span class="keyword">case</span> <span class="constant">incoerente</span>: printf(<span class="string">&quot;Codice incoerente. Ciao.\n&quot;</span>);
		                 <span class="keyword">break</span>;
		<span class="keyword">case</span> <span class="constant">okey</span>: StampaLista(primo);
		           <span class="keyword">break</span>;
	}
	<span class="keyword">return</span> 0;
}</pre>
  </body>
</html>
