<!-- file generated with webcpp 0.6.2 http://webcpp.sf.net -->
<html>
<head>
<title>C:\Documents and Settings\Administrator\Documenti\Web\asd\listati\lab20020530\ConfrontoSort\Heap.java</title>
<meta name="Microsoft Border" content="tb, default">
</head>
<body bgcolor=#ffffff text=#000000 link=#ff0000 vlink=#666666 alink=#0000ff><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>



<p align="center">

</p>

<hr>

<p align="center">&nbsp;</p>



</td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">
<pre>
<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>class</font></b> Heap {
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>static</font></b> <b><font COLOR=#0000ff>final</font></b> <b><font COLOR=#0000ff>int</font></b> DEFAULTCAPACITY = <font COLOR=#a900a9>50</font>;
	<b><font COLOR=#0000ff>protected</font></b> Comparable[] storage;
	<b><font COLOR=#0000ff>protected</font></b> <b><font COLOR=#0000ff>int</font></b> size;
	
	<b><font COLOR=#0000ff>public</font></b> Heap() {
		<b><font COLOR=#0000ff>this</font></b>(DEFAULTCAPACITY);
	}
	
	<b><font COLOR=#0000ff>public</font></b> Heap(<b><font COLOR=#0000ff>int</font></b> dim) {
		storage = <b><font COLOR=#0000ff>new</font></b> Comparable[dim];
		size = <font COLOR=#a900a9>0</font>;
	}
	
	<font COLOR=#666666>// l'utente dovrebbe usare array2heap</font>
	<b><font COLOR=#0000ff>protected</font></b> Heap(Comparable[] data) {
		storage = data;
		size = data.length;
		<b><font COLOR=#0000ff>for</font></b>(<b><font COLOR=#0000ff>int</font></b> i = getParentIndex(size-<font COLOR=#a900a9>1</font>); i &gt;= <font COLOR=#a900a9>0</font>; i--)
			heapify(i);
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>void</font></b> heapify(<b><font COLOR=#0000ff>int</font></b> i) {
		<b><font COLOR=#0000ff>if</font></b>(isLeaf(i))
			<b><font COLOR=#0000ff>return</font></b>;
		<b><font COLOR=#0000ff>else</font></b> {
			<b><font COLOR=#0000ff>int</font></b> j = <font COLOR=#a900a9>0</font>; <font COLOR=#666666>// inizializzazione fittizia per tacitare compilatore</font>
			<b><font COLOR=#0000ff>try</font></b> {
				j = getMaxChildIndex(i);
			}
			<b><font COLOR=#0000ff>catch</font></b>(Exception e) {
				<font COLOR=#666666>// qui non arriverà mai</font>
			}
			<b><font COLOR=#0000ff>if</font></b>(storage[i].compareTo(storage[j]) &lt; <font COLOR=#a900a9>0</font>) 
				exchange(i, j);
			heapify(j);
		}
	}
	
	<b><font COLOR=#0000ff>public</font></b> Comparable getMax() <b><font COLOR=#0000ff>throws</font></b> Exception {
		<b><font COLOR=#0000ff>if</font></b>(!isEmpty())
			<b><font COLOR=#0000ff>return</font></b> storage[<font COLOR=#a900a9>0</font>];
		<b><font COLOR=#0000ff>else</font></b>
			<b><font COLOR=#0000ff>throw</font></b> <b><font COLOR=#0000ff>new</font></b> Exception(<font COLOR=#ff0000>"getMax requested to empty heap"</font>);
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>void</font></b> delMax() {
		<b><font COLOR=#0000ff>if</font></b>(!isEmpty()) {
			storage[<font COLOR=#a900a9>0</font>] = storage[--size];
			heapify(<font COLOR=#a900a9>0</font>);
		}
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>boolean</font></b> insert(Comparable k) {
		<b><font COLOR=#0000ff>boolean</font></b> doubled = <b><font COLOR=#0000ff>false</font></b>;
		<b><font COLOR=#0000ff>if</font></b>(isFull()) {
			doubleStorage();
			doubled = <b><font COLOR=#0000ff>true</font></b>;
		}
		storage[size] = k;
		<b><font COLOR=#0000ff>int</font></b> i = size++;
		<b><font COLOR=#0000ff>int</font></b> j = getParentIndex(i);
		<b><font COLOR=#0000ff>while</font></b>(!isRoot(i) && (storage[i].compareTo(storage[j]) &gt; <font COLOR=#a900a9>0</font>)) {
			exchange(i, j);
			i = j;
			j = getParentIndex(i);
		}
		<b><font COLOR=#0000ff>return</font></b> doubled;
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>boolean</font></b> isLeaf(<b><font COLOR=#0000ff>int</font></b> i) {
		<b><font COLOR=#0000ff>return</font></b> getLeftIndex(i) &gt;= size;
	}
	
	<font COLOR=#666666>// non serve a niente.... solo per simmetria</font>
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>boolean</font></b> isRoot(<b><font COLOR=#0000ff>int</font></b> i) {
		<b><font COLOR=#0000ff>return</font></b> i == <font COLOR=#a900a9>0</font>;
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>boolean</font></b> isEmpty() {
		<b><font COLOR=#0000ff>return</font></b> size == <font COLOR=#a900a9>0</font>;
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>boolean</font></b> isFull() {
		<b><font COLOR=#0000ff>return</font></b> size == storage.length;
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>static</font></b> <b><font COLOR=#0000ff>void</font></b> heapSort(Comparable[] data) {
		Heap aHeap = array2heap(data);
		<b><font COLOR=#0000ff>for</font></b>(<b><font COLOR=#0000ff>int</font></b> i = aHeap.size - <font COLOR=#a900a9>1</font>; i &gt; <font COLOR=#a900a9>0</font>; i--) {
			aHeap.exchange(<font COLOR=#a900a9>0</font>, i);
			aHeap.size--;
			aHeap.heapify(<font COLOR=#a900a9>0</font>);
		}
	}
	
	<b><font COLOR=#0000ff>public</font></b> <b><font COLOR=#0000ff>static</font></b> Heap array2heap(Comparable[] data) {
		<b><font COLOR=#0000ff>return</font></b> <b><font COLOR=#0000ff>new</font></b> Heap(data);
	}
	
	<b><font COLOR=#0000ff>public</font></b> String toString() {
		StringBuffer aString = <b><font COLOR=#0000ff>new</font></b> StringBuffer();
		<b><font COLOR=#0000ff>for</font></b>(<b><font COLOR=#0000ff>int</font></b> i = <font COLOR=#a900a9>0</font>; i &lt; size; i++)
			aString.append(storage[i]).append(<font COLOR=#ff0000>" "</font>);
		aString.append(<font COLOR=#ff0000>"-- capacity = "</font> + storage.length);
		<b><font COLOR=#0000ff>return</font></b> aString.toString();
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>static</font></b> <b><font COLOR=#0000ff>int</font></b> getLeftIndex(<b><font COLOR=#0000ff>int</font></b> i) {
		<b><font COLOR=#0000ff>return</font></b> <font COLOR=#a900a9>2</font> * i + <font COLOR=#a900a9>1</font>;
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>static</font></b> <b><font COLOR=#0000ff>int</font></b> getRightIndex(<b><font COLOR=#0000ff>int</font></b> i) {
		<b><font COLOR=#0000ff>return</font></b> getLeftIndex(i) + <font COLOR=#a900a9>1</font>;
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>static</font></b> <b><font COLOR=#0000ff>int</font></b> getParentIndex(<b><font COLOR=#0000ff>int</font></b> i) {
		<b><font COLOR=#0000ff>return</font></b> (i - <font COLOR=#a900a9>1</font>) / <font COLOR=#a900a9>2</font>;
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>boolean</font></b> indexInHeap(<b><font COLOR=#0000ff>int</font></b> i) {
		<b><font COLOR=#0000ff>return</font></b> i &lt; size;
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>int</font></b> getMaxChildIndex(<b><font COLOR=#0000ff>int</font></b> k) <b><font COLOR=#0000ff>throws</font></b> Exception {
		<b><font COLOR=#0000ff>if</font></b>(isLeaf(k))
			<b><font COLOR=#0000ff>throw</font></b> <b><font COLOR=#0000ff>new</font></b> Exception(<font COLOR=#ff0000>"children requested to a leaf"</font>);
		<b><font COLOR=#0000ff>else</font></b> {
			<b><font COLOR=#0000ff>int</font></b> l = getLeftIndex(k);
			<b><font COLOR=#0000ff>int</font></b> r = getRightIndex(k);
			<b><font COLOR=#0000ff>int</font></b> max = l;
			<b><font COLOR=#0000ff>if</font></b>(indexInHeap(r) && (storage[r].compareTo(storage[l]) &gt; <font COLOR=#a900a9>0</font>))
				max = r;
			<b><font COLOR=#0000ff>return</font></b> max;
		}
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>void</font></b> exchange(<b><font COLOR=#0000ff>int</font></b> i, <b><font COLOR=#0000ff>int</font></b> j) {
		Comparable tmp = storage[i];
		storage[i] = storage[j];
		storage[j] = tmp;
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>void</font></b> printStorage() {
		<b><font COLOR=#0000ff>for</font></b>(<b><font COLOR=#0000ff>int</font></b> i = <font COLOR=#a900a9>0</font>; i &lt; storage.length; i++)
			System.out.print(<font COLOR=#ff0000>" "</font> + storage[i]);
		System.out.println();
	}
	
	<b><font COLOR=#0000ff>private</font></b> <b><font COLOR=#0000ff>void</font></b> doubleStorage() {
		Comparable[] newstorage = new Comparable[<font COLOR=#a900a9>2</font> * storage.length];
		System.arraycopy(storage, <font COLOR=#a900a9>0</font>, newstorage, <font COLOR=#a900a9>0</font>, storage.length);
		storage = newstorage;
	}
}

</pre>
<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>



<p>&nbsp;</p>

<hr>
<table border="0" width="100%">

  <tr>

    <td width="505" valign="top">

      <h5 align="left">Bacheca di <i>Algoritmi e Strutture Dati </i>a.a. 2004-05 - canale
      A - L</h5>

    </td>

    <td width="381" valign="top">
      <p align="right"><font size="1"><a href="http://algo.mastertopforum.com/" target="_blank">forum
      del corso</a></font></td>

  </tr>

  <tr>

    <td width="505" valign="top">

      <h6>ultima modifica: 19/04/2005 16.30</h6>

    </td>

    <td width="381" valign="top">

      <h5 align="right">by <a href="mailto:damore@dis.uniroma1.it"> FdA</a></h5>

    </td>

  </tr>

</table></td></tr><!--msnavigation--></table></body>
</html>
