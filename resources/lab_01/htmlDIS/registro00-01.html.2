<html>
<head>
<title>
Registro lezioni A.A. 2000/01 del
Corso di Fondamenti di Informatica II - primo modulo,
Universit&agrave; di Roma "La Sapienza"
</title>
</head>
<body>

<center>
<h2>
Diploma Universitario in Ingegneria Informatica
</h2>
</center>

<center>
<h1>
Fondamenti di Informatica II - primo modulo
</h1>
</center>

<center>
<h2>
Lezioni faccia a faccia A.A. 2000/01
</h2>
</center>

<center>
<h3>
docente: <a href="http://www.dis.uni`roma1.it/~degiacomo">Giuseppe De Giacomo</a>
</h3>
</center>

<hr><b>Materiale didattico: testo adottato</b>
<p><b>[T1]</b> M. Cadoli, M. Lenzerini, P. Naggar, A. Schaerf, <i><a href="http://www.dis.uniroma1.it/pub/clns">Fondamenti
della progettazione dei programmi: principi, tecniche e loro applicazione
in C++</a></i>, Citt&aacute;<i>Studi</i>Edizioni, UTET Libreria, 1997.
<p><b>Materiale didattico: testi consigliati</b>
<p><b>[T2]</b> Capper, <i>Introduzione al C++</i>, McGraw Hill, 1997.
<p><b>[T3]</b> C. Batini, L. Carlucci Aiello, M. Lenzerini, A. Miola,
A. Marchetti Spaccamela, <i>Fondamenti di Programmazione dei Calcolatori
Elettronici, </i>Franco Angeli, 4a edizione, 1992.
<p><!--

SPECIFICA:

14 ore ripasso C++
16 ore classi C++
10 ore progettazione - concettualizzazione
12 ore progettazione - realizzazione
8  ore ereditarieta'
------------------------------------------
60 ore totale


-->
<hr>
<center>
<h2>
Lezioni faccia a faccia - tabella riassuntiva</h2></center>

<center><table BORDER WIDTH="90%" >

<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
Settimana
</font></i></td>

<td VALIGN=TOP WIDTH="10%"><i><font color="#008000">
Argomento
</font></i></td>

<td VALIGN=CENTER WIDTH="25%"><i><font color="#008000">
Lunedi (ore 10-14)
</font></i></td>

<td VALIGN=CENTER WIDTH="25%"><i><font color="#008000">
Venerdi (ore 9-12)
</font></i></td>
</tr>

<tr>
<td VALIGN=CENTER WIDTH="15%"><i><font color="#008000">
<b>1:</b>15-19gen
</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">
Introduzione al C++
</font></td>

<td VALIGN=CENTER WIDTH="23%">
intro al corso ed al C++<br>
vettori in C++<br>
<font color="#FF0000">(<a href="#Lun1">Lez 1,2,3,4</a>)
</font></td>


<td VALIGN=CENTER WIDTH="25%">
funzioni in C++<br>
ricorsione<br>
<font color="#FF0000">(<a href="#Ven1">Lez 5,6,7</a>)
</td>
</tr>

<tr>
<td VALIGN=CENTER WIDTH="15%"><i><font color="#008000">
<b>2:</b>22-26gen
</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">
Introduzione al C++
</font></td>

<td VALIGN=CENTER WIDTH="23%">
Record e puntatori in C++<br>
Laboratorio su introduzione al C++<br>
<font color="#FF0000">(<a href="#Lun2">Lez 8,9,10,11</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">
Array dinamici<br>
Esercizi su liste ed array dinamici<br>
<font color="#FF0000">(<a href="#Ven2">Lez 12,13,14</a>)</font></td> </tr>

<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>3:</b>29gen-2feb
</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">
Classi in C++
</font></td>

<td VALIGN=CENTER WIDTH="23%">
Introduzione alle classi C++<br>
construttori e distruttori<br>
<font color="#FF0000">(<a href="#Lun3">Lez 15,16,17,18</a>)
</font></td>


<td VALIGN=CENTER WIDTH="23%">
Overloading di operatori<br>
funzioni friend<br>
<font color="#FF0000">(<a href="#Ven3">Lez 19,20,21</a>)
</font></td>
</tr>

<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>4:</b>5-9feb</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">
Classi in C++
</font></td>

<td VALIGN=CENTER WIDTH="23%">
<center>---------</center>
</font></td>

<td VALIGN=CENTER WIDTH="23%">
Il problema dell'interferenza<br>
Ridefinizione del costruttore di copia, distruttore e assegnazione<br>
<fontcolor="#FF0000">(<a href="#Ven4">Lez 22,23,24</a>)</font></td>
</tr>

<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>5:</b>12-16feb
</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Principi di progettazione<br>
Concettualizzazione</font></td>


<td VALIGN=CENTER WIDTH="23%">
Ciclo di vita e qualita' del software<br>
Laboratorio su classi in C++<br>
<font color="#FF0000">(<a href="#Lun5">Lez 25,26,27,28</a>)</font></td>




<td VALIGN=CENTER WIDTH="23%">
Modularizzazione<br>
<font color="#FF0000">(<a href="#Ven5">Lez 29,30,31</a>)</td>
</tr>


<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>6:</b>19-23feb</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">
Realizzazione
</font></td>

<td VALIGN=CENTER WIDTH="23%">
Specifica di tipi astratti<br>
Metodologia realizz. classi C++<br>
Template C++<br>
<font color="#FF0000">(<a href="#Lun6">Lez 32,33,34,35</a>)</td>

<td VALIGN=CENTER WIDTH="23%">
Schemi realizzativi con funzionali e con side-effect<br>
<font color="#FF0000">(<a href="#Ven6">Lez 36,37,38</a>)
</font></td>
</tr>


<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>7: </b>26feb-2mar</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Realizzazione</font></td>

<td VALIGN=CENTER WIDTH="23%">
<center>---------</center>
</font></td>


<td VALIGN=CENTER WIDTH="23%">
Astrazione per valore e per entita'<br>
Realizzazione di classi astrazione per valore e per entita'<br>
<font color="#FF0000">(<a href="#Ven7">Lez 39,40,41</a>)
</font></td>
</tr>


<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>8:</b>5-9mar</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Realizzazione</font></td>

<td VALIGN=CENTER WIDTH="23%">
Realizzazione di relazioni has-a ed has-many<br>
Laboratorio su specifica di tipi astratti<br>
<font color="#FF0000">(<a href="#Lun8">Lez 42,43,44,45</a>)</font></td>

<td VALIGN=CENTER WIDTH="23%">
Realizzazione di classi C++<br>
Esercizio d'esame<br>
<font color="#FF0000">(<a href="#Ven8">Lez 46,47,48</a>)
</font></td>
</tr>

<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>9:</b>12-16mar</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Esercizi d'esame</font></td>

<td VALIGN=CENTER WIDTH="23%">
<center>---------</center>
</font></td>

<td VALIGN=CENTER WIDTH="23%">
Realizzazione di classi C++<br>
Esercizio d'esame<br>
<font color="#FF0000">(<a href="#Ven9">Lez 49,50,51</a>)
</font></td>
</tr>


<tr>
<td VALIGN=CENTER WIDTH="20%"><i><font color="#008000">
<b>10:</b>19-23mar</font></i></td>

<td VALIGN=TOP WIDTH="23%"><font color="#0000FF">Esercizi d'esame</font></td>

<td VALIGN=CENTER WIDTH="23%">
Realizzazione di classi C++<br>
Esercizio d'esame<br>
<font color="#FF0000">(<a href="#Lun10">Lez 52,53,54,55</a>)
</font></td>

<td VALIGN=CENTER WIDTH="23%">
<center>---------</center>
</font></td>
</tr>

</table></center>

<p>
<hr>
<center>
<h2>
Lezioni faccia a faccia - dettaglio</h2></center>

<hr><a NAME="Lun1"></a>
<ul>
  <li> <b>Lezione 1,2,3,4 - 15/1/01</b>

       <ul>
         <li> <b>Prima parte</b>
              <ul>
                <li>
                     <b>Argomenti trattati</b>
                     [T1, Cap.3 fino a pag. 55] [T2, Cap. 2 e Cap. 4]

                     <ul>
                       <li> Presentazione del corso

                       <li> Struttura di un programma C++

                       <li> Primi programmi C++:
                            <a href="primiprogrammi/somma10.cpp">
                            somma dei primi 10 numeri interi</a> e
                            <a href="primiprogrammi/sommaN.cpp">
                            somma dei primi N numeri interi</a>

                       <li> Istruzioni, cicli while, istruzione if,
                            dichiarazioni, istruzioni di IO

                       <li> Tipi int, char, float e bool
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>

                     <ul>
                       <li> Struttura del corso e sue relazioni con altre corsi

                       <li> Materiale didattico che si utilizza nel corso (si veda anche il
                            <a href="programma00-01.html">programma d'esame</a>)

                       <li> Differenza tra programmazione e progettazione del software

                       <li> Scrivere semplici programmi C++
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li> Scrivere un programma C++ che legga un intero N, legga poi N
                            numeri interi e ne calcoli la somma
                            (<a href="primiprogrammi/leggiNsomma.cpp">soluzione</a>)

                       <li> Scrivere un programma C++ che legga un intero N, legga poi N
                            numeri interi e ne calcoli il massimo
                            (<a href="primiprogrammi/maxN.cpp">soluzione</a>)
                     </ul>
              </ul>
         <li> <b>Seconda parte</b>

              <ul>

                <li>
                     <b>Argomenti trattati</b> [T1, Cap.3 fino a pag. 55] [T2, Cap. 2 e Cap. 4]

                     <ul>
                       <li>
                            Dichiarazione e definizione di variabili (<a href="array/scopeVar.cpp">programma
                            che illustra scope</a>)</li>

                       <li>
                            Cicli for</li>

                       <li>
                            Array in C++ (<a href="array/leggiV.cpp">programma
                            per lettura e stampa di un vettore</a>, <a href="array/stringhe.cpp">programma
                            sulle stringhe</a>)</li>

                       <li>
                            Matrici in C++ (<a href="array/leggiM.cpp">programma
                            per lettura e stampa di una matrice</a>)</li>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Come si dichiarano array in C++</li>

                       <li>
                            Scrivere e provare semplici programmi C++ su array</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Scrivere un programma C++ per il calcolo del massimo e del valore medio
                            di un vettore (<a href="array/maxV.cpp">soluzione</a>)</li>

                       <li>
                            Scrivere un programma C++ per il calcolo del massimo e del valore medio
                            di una matrice (<a href="array/maxM.cpp">soluzione</a>)</li>
                     </ul>
              </ul>
       </ul>
</ul>

<hr><a NAME="Ven1"></a>
<ul>
  <li>
       <b>Lezioni 5,6,7 - 19/1/01</b></li>
       <ul>
         <li><b>Prima parte</b>
              <ul>
                <li>
                     <b>Argomenti trattati</b> [T1, Cap.3 fino a pag. 62] [T2, Cap. 5]</li>

                     <ul>
                       <li>
                            Funzioni in C++ (<a href="funzioni/fattiterativo.cpp">fattoriale
                            iterativo</a>, <a href="funzioni/fattricorsivo.cpp">fattoriale
                            ricorsivo</a>)</li>

                       <li>
                            Passaggio di parametri per valore e per riferimento (<a href="funzioni/legaparametri.cpp">passaggio
                            di parametri</a>)</li>

                       <li>
                            Scope statico e accesso a variabili globali (<a href="funzioni/scopefunz.cpp">scope
                            statico</a>, <a href="funzioni/varglobale.cpp">var
                            globali</a>)</li>

                       <li>
                            Passaggio di array come parametri (<a href="funzioni/leggistampavett.cpp">funz
                            per leggere e stampare vettore</a>)</li>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Come si dichiarano e definiscono funzioni e procedure in C++</li>

                       <li>
                            Progettare semplici funzioni in C++</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Scrivere funzione di ordinamento di un vettore basato su Selection Sort
                            da provare in laboratorio (<a href="funzioni/selectionsort.cpp">soluzione</a>)</li>
                     </ul>
              </ul>


         <li> <b>Seconda parte</b>

              <ul>
                <li>
                     <b>Argomenti trattati</b> [Approfondimento sulla ricorsione]</li>

                     <ul>
                       <li>Domini definiti induttivamente</li>
                       <li>Principio di induzione </li>
                       <li>Funzioni ricorsive (cioe' definite sulla struttura induttiva del dominio)</li>
                       <li>Realizzazione in C++ di funzioni ricorsive</li>
                       <li>Esecuzione di funzioni ricorsive utilizzando lo stack (<a href="ricorsione/main.html">simulazione
                            del calcolo del fattoriale </a>)
                            </li>
                       <li>
                            Esempi di progettazione di funzioni ricorsive e loro realizzazione
                            (<a href="ricorsione/sommamolt.cpp">somma&molt</a>)</li>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Progettare semplici funzioni ricorsive</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Progettare funzioni ricorsive per l'esponente, il fattoriale e il <=
                            per i numeri naturali
                            <br>assumendo di poter usare solo Succ e Pred (<a href="ricorsione/naturali.cpp">soluzione</a>)</li>
                     </ul>
              </ul>
       </ul>

</ul>

<hr>
<br><a NAME="Lun2"></a>
<ul>
  <li>
       <b>Lezioni 8,9,10,11 - 22/1/01</b></li>
       <ul>
         <li> <b>Prima parte</b>
              <ul>
                <li>
                     <b>Argomenti trattati</b> [T1, Cap.3 fino a pag. 62] [T2, Cap. 6]</li>

                     <ul>
                       <li>
                            Record in C++ (<a href ="recpunt/record.cpp">es. uso record</a>)</li>
                       <li> Puntatori in C++ (<a href ="recpunt/puntatori.cpp">es. uso puntatori</a>)</li>
                       <li> Riferimenti (o alias) e puntatori (esempi: <a href ="recpunt/maxrif.cpp">maxrif.cpp</a>, <a href="recpunt/scambiapunt.cpp">scambia.cpp</a>)</li>
                       <li> Strutture collegate di record e puntatori (<a href="recpunt/esliste.cpp">esempi su liste - lettura ricorsiva e stampa iterativa</a>)
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Utilizzare record e puntatori per gestire strutture di dati dinamiche</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Lettura iterativa di una lista (con o senza uso del record generatore), stampa ricorsiva di una lista, cancellazione ricorsiva ed iterativa di una lista (<a href="recpunt/esliste.cpp">soluzione</a>)</li>
                     </ul>
              </ul>

         <li> <b>Seconda parte</b> (laboratorio)

              <ul>
                <li>
                     <b>Argomenti trattati</b></li>

                     <ul>
                       <li>
                            <a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-00-01/01-01-22/cosasifa.txt">Semplici programmi in C++</a></li>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Scrivere, compilare ed eseguire semplici programmi C++</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Tutti quelli che non si riesce a finire in laboratorio (<a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-00-01/01-01-22">soluzioni</a>)</li>

                       <li>
                            Scrivere funzione di ordinamento di un vettore basata su Bubble Sort
                            (<a href="funzioni/bubblesort.cpp">soluzione</a>)</li>
                     </ul>
              </ul>
       </ul>
</ul>


<hr><a NAME="Ven2"></a>
<ul>
  <li>
       <b>Lezioni 12,13,14 - 26/1/01</b></li>
       <ul>
         <li> <b>Prima parte</b>

              <ul>
                <li>
                     <b>Argomenti trattati</b> [T1, Cap.3 fino a pag. 62] [T2, Cap. 6]</li>

                     <ul>
                       <li>
                            Aritmetica dei puntatori, relazione tra array e puntatori></li>
                       <li> Array dinamici (<a href ="arraydinamici/arraydinamici.cpp">into ad array dinamici</a>, <a href ="arraydinamici/adinvsliste.cpp">es. uso array dinamici vs liste</a>)</li>
                       <li> Matrici dinamiche(<a href ="arraydinamici/matricidinamiche.cpp">intro a matrici dinamiche</a>)
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Utilizzare array e matrici dinamiche</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Scrivere programma che legga due interi M ad N, legga M*N interi memorizzandoli in una matrice dinamica e stampi gli indici di riga e colonna del elemento di valore massimo della matrice(<a href="arraydinamici/indicimax.cpp">soluzione</a>)</li>
                     </ul>
              </ul>

         <li><b>Seconda parte</b>
              <ul>
                <li>
                     <b>Argomenti trattati</b></li>

                     <ul>
                       <li>
                            <a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-99-00/99-10-20/cosasifa.txt">Programmi su record e puntatori in C++</a></li>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Scrivere, compilare ed eseguire semplici programmi su puntatori e record
                            in C++</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Tutti quelli che non si riesce a finire in laboratorio (<a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-99-00/99-10-20">soluzioni</a>)</li>
                     </ul>
              </ul>
       </ul>
</ul>



<hr><a NAME="Lun3"></a>
<ul>
  <li>
       <b>Lezioni 15,16,17,18 - 29/1/01</b></li>
       <ul>
         <li> <b>Prima parte</b>
              <ul>
                <li>
                     <b>Argomenti trattati</b> [T1, Cap. 4, par. 4.1, 4.2, 4.3, 4.4, 4.11]</li>

                     <ul>
                       <li>
                            Introduzione alle classi in C++</li>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Saper leggere semplici dichiarazioni di classi</li>

                       <li>
                            Conoscere la distinzione tra campi dati e campi funzioni, e tra campi pubblici
                            e campi privati</li>

                       <li>
                            Conoscere la distinzione tra file .h e file .cpp nella definizione di classi</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Terminare la definizione dei costruttori della classe tempo</li>
                     </ul>
              </ul>

       <li> <b>Seconda parte</b>

            <ul>
              <li>
                   <b>Argomenti trattati</b>[T1, Cap. 4, par. 4.5,  4.9.1]

                   </li>

                   <ul>
                     <li>
                          Costruttori</li>

                     <li>
                          Cosa il C++ da' gratis ad una classe (costruttore a zero argomenti, costruttire di copia, assegnazione)</li>

                     <li>
                          <a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-99-00/99-10-27/cosasifa.txt">Semplici
                          esercizi su classi in C++</a></li>
                   </ul>

              <li>
                   <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                   <ul>
                     <li>
                          Saper utilizzare i costruttori nella definizione di una classe</li>

                     <li>
                          Sapere cosa il C++ da' per default ad una classe</li>

                     <li>
                          Scrivere, compilare ed eseguire semplici programmi su classi</li>
                   </ul>

              <li>
                   <b>Esercizi proposti</b></li>

                   <ul>
                     <li>
                          Tutti quelli che non si riesce a finire in laboratorio (<a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-99-00/99-10-27">soluzioni</a>)</li>
                   </ul>
            </ul>
     </ul>
</ul>

<hr><a NAME="Ven3"></a>
<ul>
  <li>
       <b>Lezioni 19,20,21 - 2/2/01</b></li>
       <ul>
         <li><b>Prima parte e seconda parte</b>
              <ul>
                <li>
                     <b>Argomenti trattati</b> [T1, Cap. 4, par. 4.8, 4.9, 4.21]</li>

                     <ul>
                       <li> Campi static di una classe</li>
                       <li> Overloading di operatori, overloading di funzioni esterne ad una classe </li>
                       <li> Funzioni friend di una classe</li>
                       <li> Classi clienti di altre classi</li>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>
                            Sper utilizzare campi static</li>
                       <li>
                            Sapere ridefinire operatori di classe, saper ridefinire l'operatore di output
                            </li>
                       <li>
                            Saper definire funzioni friend</li>
                     </ul>

                <li>
                     <b>Esercizi proposti</b></li>

                     <ul>
                       <li>
                            Scrivere overloading di operator+ per tempo, sia come funzione membro, che come funzione esterna friend (si veda [T1, 4.9, 4.9.2]).</li>
                       <li>
                            A partire da <code>telefonata.h</code> (si veda [T1, 4.12]) scrivere il <code>telefonata.cpp</code>. Inoltre analizzare in dettaglio quali costruttori di tempo e di telefonata sono invocati dall'istruzione:<br>
                            <code> telefonata t1=telefonata(tempo(15,0),tempo(15,5),555555);</code>
                            </li>
                       <li>Studiare [T1, par. 4.6, 4.7].
                     </ul>
              </ul>
       </ul>
</ul>

<hr><a NAME="Ven4"></a>
<ul>
  <li>
       <b>Lezioni 22,23,24 - 9/2/01</b>
       <ul>
         <li> <b>Prima e seconda parte</b>

              <ul>
                <li>
                     <b>Argomenti trattati</b> [T1, Cap. 4, par. 4.12 - 4.19]</li>

                     <ul>
                       <li> Il problema dell'interferenza
                       <li> Ridefinizione del costruttore di copia
                       <li> Ridefinizione dell'assegnazione
                       <li> Ridefinizione del distruttore
                       <li> La classe
                            <a href="pila"><tt>Pila</tt></a>
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li>Sper definire una classe cliente di un'altra</li>

                       <li>Saper evitare il problema dell'interferenza
                            ridefinendo costruttore di copia e assegnazione</li>
                       <li>Saper ridefinire il distruttore
                     </ul>
                <li>
                     <b>Esercizi proposti</b></li>
                     <ul>
                       <li>Riimplementare la classe <code>Pila</code> utilizzando un array dinamico per la rappresentazione dei valori                     </ul>
              </ul>
       </ul>
</ul>


<hr><a NAME="Lun5"></a>
<ul>
<li>
<b>Lezioni 25,26,27,28 - 12/2/01</b></li>
<ul>
  <li><b>Prima parte</b>
       <ul>
         <li>
              <b>Argomenti trattati</b> [T1, Cap. 1, Cap. 2]</li>

              <ul>
                <li>
                     Ciclo di vita e qualita' del software</li>

                <li>
                     La fase di progettazione del sofware</li>

                <li>
                     Principi di progettazione</li>

                <li>
                     Tecniche di progettazione: la modularizzazione</li>
              </ul>

         <li>
              <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

              <ul>
                <li>
                     Conoscere le fasi del ciclo di vita e le qualita' del software ed i principi
                     della progettazione</li>

                <li>
                     Cosa e' la modularizzazione</li>
              </ul>
       </ul>

  <li><b>Seconda parte</b> (laboratorio)
       <ul>
         <li> Realizzare la classe <tt>CollOrd</tt> che incapsula in
              una classe la struttura dati basata su array
              dinamici vista nelle <a href="#Ven2">Lez 12,13,14</a>:
              <a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-00-01/01-02-12/cosasifa.txt">cosasifa.txt</a>
              (<a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-00-01/01-02-12/">soluzione</a>)
       </ul>
</ul>
</ul>

<hr><a NAME="Ven5"></a>
<ul>
<li>
<b>Lezioni 29,30,31 - 16/2/01</b></li>

     <ul>
       <li><b>Prima e seconda parte</b>
            <ul>
              <li>
                   <b>Argomenti trattati</b> [T1, Cap. 9]</li>

                   <ul>
                     <li>
                          La modularizzazione nella fase di concettualizzazione</li>

                     <li>
                          La modularizzazione nella fase di realizzazione</li>

                     <li>
                          <a href="modularizzazione/cosasifa.txt">Esercizio
                          su modularizazione per oggetto in C++</a>(<a href="modularizzazione">soluzione</a>)</li>

                     <li>
                          <a href="modularizzazione/esempiprogsupiufile.cpp">Esempi di semplici programmi su piu' file</a></li>
                   </ul>

              <li>
                   <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                   <ul>
                     <li>
                          Come si usa la tecnica della modularizzazione nella progettazione del software</li>
                   </ul>

              <li>
                   <b>Esercizi proposti</b></li>

                   <ul>
                     <li>
                          <a href="modularizzazione/mastermind/cosasifa.txt">MasterMind</a> (<a href="modularizzazione/mastermind">soluzione</a>)</li>
                   </ul>
            </ul>
     </ul>
</ul>

<hr><a NAME="Lun6"></a>
<ul>
<li>
<b>Lezioni 32,33,34,35 - 19/2/01</b></li>

     <ul>
       <li><b>Prima parte</b>
            <ul>
              <li>
                   <b>Argomenti trattati</b> [T1, Cap. 10 - escluso 10.3]

                   <ul>
                     <li>
                          La specifica di tipi astratti</li>
                   </ul>

              <li>
                   <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                   <ul>
                     <li>Il linguaggio di specifica dei tipi astratti

                     <li>Saper analizzare la specifica di tipi astratti

                     <li>Saper specificare tipi astratti
                   </ul>

              <li>
                   <b>Esercizi proposti</b></li>

                   <ul>
                     <li>
                          Analizzare la specifica di tutti i tipi astratti riportati nel Cap. 10
                          di [T1]</li>
                   </ul>
            </ul>

     <li> <b>Seconda parte</b>

          <ul>
            <li>
                 <b>Argomenti trattati</b> [T1, Cap. 12 fino a 12.5 incluso]</li>

                 <ul>
                   <li>
                        La realizzazione di tipi astratti mediante classi</li>

                   <li>
                        Schemi realizzativi</li>
                 </ul>

            <li>
                 <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                 <ul>
                   <li>
                        Il metodo generale per realizzare un tipo astratto mediante una classe</li>

                   <li>
                        Caratteristiche dei vari schemi realizzativi</li>

                 </ul>
          </ul>

   <li> <b>Terza parte</b>

        <ul>
          <li>
               <b>Argomenti trattati</b> [T1, Cap. 4, par. 4.22]</li>

               <ul> <li> Template in C++
               <li> Esempio: <a href="pila/template"> parametrizzazione della classe Pila</a>

               <li>
                    <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                    <ul>
                      <li>
                           Parametrizzare una classe attraverso l'uso dei template</li>
                      <li> Scrivere, compilare ed eseguire programmi che fannu uso di template
                    </ul>

             </ul>

        <li>
             <b>Esercizi proposti</b></li>

             <ul>
               <li><a
                    href="collord/template">Parametrizzazione
                    attraverso i template della classe <code>CollOrd</code></a> [<a href="#Lun5">Lez 25,26,27,28</a>]</li>
             </ul>

      </ul>
</ul>
</ul>


<hr><a NAME="Ven6"></a>
<ul>
  <li>
       <b>Lezioni 36,37,38 - 23/2/01</b></li>

       <ul>
         <li><b>Prima e seconda parte</b>
       <ul>
         <li>
              <b>Argomenti trattati</b> [T1, Cap. 12, par. 12.6]</li>

              <ul>
                <li>
                     Schema realizzativo funzionale con condivisione</li>

                <li>
                     Schema realizzativo funzionale senza condivisione</li>

                <li>
                     Schema realizzativo con side-effect senza condivisione</li>

                <li>
                     Progettazione della classe Insieme con diversi i schemi realizzativi</li>
              </ul>

         <li>
              <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

              <ul>
                <li>
                     I principi generali con cui si progetta una classe secondo i diversi schemi realizzativi</li>

                <li>
                     Vantaggi e svantaggi dei diversi schemi realizzativi</li>
              </ul>

         <li>
              <b>Esercizi proposti</b></li>

              <ul>
                <li> Realizzare la classe Insieme che facemdo uso dello
schema realizzativo con side-effect e senza condivisione</li>

                <li> Analizzare la realizzazione della classe Insieme che fa
uso dello schema realizzativo con side-effect e condivisione</li>
              </ul>
       </ul>
</ul>

</ul>



<hr><a NAME="Ven7"></a>
<ul>
<li>
<b>Lezioni 39,40,41 - 2/3/01</b></li>

     <ul>
       <li><b>Prima parte</b>

       <ul>
         <li>
              <b>Argomenti trattati</b> [T1, Cap. 10, par. 10.3]</li>

              <ul>
                <li>
                     Astrazioni di valori e astrazioni di entita'
                <li>
                     La nozione di uguaglianza per astrazioni di velori e astrazioni d'entita'

                <li>
                     Il tipo astratto, astrazione per entita', CassaCambio</li>
              </ul>

         <li>
              <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

              <ul>
                <li> Quali sono le caratteristiche fondamentali che
                     distinguono tipi astratti che sono astrazione di valori semplici, e quelli che
                     sono astrazione d' entita'.
              </ul>
       </ul>
</ul>

<ul>
  <li><b>Seconda parte</b>
  <ul>
    <li>
         <b>Argomenti trattati</b> [T1, Cap. 12, par. 12.8]</li>

         <ul>
           <li> Classi astrazione di valori semplici
           <li> Classi astrazione di valori collezione
           <li> Classi astrazione di entita'

         </ul>

    <li>
         <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

         <ul>
           <li> Come si realizzano classi astrazione di valori semplici, valori
                collezione, di entita'</li>
         </ul>
  </ul>
</ul>

</ul>


<hr><a NAME="Lun8"></a>
<ul>
  <li>
       <b>Lezioni 42,43,44,45 - 5/3/01</b>

       <ul>
         <li><b>Prima parte</b>
              <ul>
                <li>
                     <b>Argomenti trattati</b> [T1, Cap. 12, par. 12.8]</li>

                     <ul>
                       <li> Realizzazione delle relazioni has-a e has-many
                       <li> Sharing
                       <li> Realizzazione della classe Persona
                     </ul>

                <li>
                     <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                     <ul>
                       <li> Come si realizzano le relazioni has-a e has-many
                       <li> Differenza tra sharing ed interferenza
                     </ul>
              </ul>
       </ul>
       <ul>
         <li><b>Seconda parte</b> (laboratorio)
              <ul>

                <b>Argomenti trattati</b> [T1, Cap. 12]</li>

                <ul>
                  <li>
                       <a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-00-01/01-03-05/cosasifa.txt">Realizzare il tipo astratto albero binario utilizzando:</a>
                       <ul>
                         <li>schema funzionale con condivisione
                         <li>schema funzionale senza condivisione
                       </ul>
                </ul>

           <li>
                <b>Cosa lo studente dovrebbe sapere dopo la lezione</b>:</li>

                <ul>
                  <li>
                       Realizzare tipo astratto in modo funzionale con condivisione</li>
                  <li>
                       Realizzare tipo astratto in modo funzionale senza condivisione</li>
                </ul>

           <li>
                <b>Esercizi proposti</b></li>

                <ul>
                  <li>
                       Tutti quelli che non si riesce a finire in laboratorio (<a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/esercitazioni/aa-00-01/01-03-05">soluzioni</a>)</li>
                </ul>
         </ul>

  </ul>
</ul>


<hr><a NAME="Ven8"></a>
<ul>
<li>
<b>Lezione 46,47,48 - 9/3/01</b></li>


<ul>
<li>
<b>Argomenti trattati</b></li>

<ul>
<li> <a href="eserciziesame/SolApp99-07-21/testo.html">Esercizio
d'esame (appello 21/7/99)</a>
<li> <a href="eserciziesame/SolApp99-07-21">Soluzione</a>
</ul>


<li>
<b>Esercizi proposti</b></li>
<ul>

  <li> <a href="eserciziesame/SolApp99-04-26/testo.html">Esercizio
     d'esame (appello 26/4/99)</a>

</ul>
</ul>
</ul>


<hr><a NAME="Ven9"></a>
<ul>
<li>
<b>Lezione 49,50,51 - 16/3/01</b></li>


<ul>
<li>
<b>Argomenti trattati</b></li>

<ul>
<li> <a href="eserciziesame/SolApp99-04-26/testo.html">Esercizio
d'esame (appello 26/4/99)</a>
<li> <a href="eserciziesame/SolApp99-04-26">Soluzione</a>
</ul>


<li>
<b>Esercizi proposti</b></li>
<ul>

  <li> <a href="eserciziesame/SolApp98-12-21A/testo.txt">Esercizio
     d'esame (appello 21/12/98a)</a>

</ul>
</ul>
</ul>



<hr><a NAME="Lun10"></a>
<ul>
<li>
<b>Lezione 52,53,54,55 - 19/3/01</b></li>


<ul>
<li>
<b>Argomenti trattati</b></li>

<ul>
  <li> <a href="eserciziesame/SolApp98-12-21A/testoA.txt">Esercizio
     d'esame (appello 21/12/98a)</a>
<li> <a href="eserciziesame/SolApp98-12-21A">Soluzione</a>
</ul>


<li>
<b>Esercizi proposti</b></li>
<ul>

  <li> <a href="eserciziesame/SolApp98-12-21B/testoB.txt">Esercizio
     d'esame (appello 21/12/98b)</a>

  <li> Tutti gli esercizi d'esame dati agli
        <a href="http://tibur.dis.uniroma1.it/program/fondii/diplomamodulo1/appelli">appelli degli anni passati</a>
</ul>
</ul>
</ul>

<hr><font size=-1>Home page del <a href="index.html">Corso
di Fondamenti di Informatica II - primo modulo</a></font>
<br><font size=-1>del Diploma Universitario in Ingegneria Informatica dell'Universit&agrave;
di Roma "La Sapienza"</font>
</body>
</html>
